{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"x","isInterned":false}},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"Assign","position":2,"hasCont":false,"lhs":{"$type":"StoreListEx","position":4,"hasCont":false,"before":[{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"x","isInterned":false}}],"unpack":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"after":[{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"y","isInterned":false}}]},"rhs":{"$type":"List","position":3,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":3}}}]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"g","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"u","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Return","position":1,"hasCont":false,"value":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"x","isInterned":false}},"code":{"$type":"Return","position":3,"hasCont":false,"value":{"$type":"BinOp","position":1,"left":{"$type":"LocalVar","position":2,"slot":0},"right":{"$type":"LocalVar","position":3,"slot":-1},"op":0}},"metadata":{"$type":"Metadata","localnames":["x"],"freenames":["u"],"codename":"<lambda>","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147581954,2147713028,2147598336],"compressedPositions":[92277632,92281472,92280192,92280448,92281280]}},"default_args":[],"freeslots":[0]}}]},"metadata":{"$type":"Metadata","localnames":["u"],"freenames":[],"codename":"g","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147598336],"compressedPositions":[75530245,2149220357,2147794944]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"u","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"x","isInterned":false}},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":2,"hasCont":true,"test":{"$type":"CmpOp","position":3,"op":15,"left":{"$type":"LocalVar","position":4,"slot":1},"comparators":[{"$type":"LocalVar","position":5,"slot":0}]},"body":{"$type":"Block","hasCont":true,"suite":[{"$type":"Assign","position":6,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"BinOp","position":7,"left":{"$type":"LocalVar","position":8,"slot":1},"right":{"$type":"Constant","o":{"$type":"TrInt","value":1}},"op":0}},{"$type":"Yield","position":9,"value":{"$type":"LocalVar","position":10,"slot":1}}]},"orelse":null}]},"metadata":{"$type":"Metadata","localnames":["x","i"],"freenames":[],"codename":"u","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147713028,2147581957,2147909637,2147975176,2147909641,2148171787,2148171787,2148302861,2147581966,2147598336],"compressedPositions":[125861899,2148499464,2147778568,2148106249,2147778569,2148171785,2148499465,2148237321,2148433930,2148040714,2148630538,2148302858,2148368395,2148040715,2148450304]}},"default_args":[],"freeslots":[]}},{"$type":"CallEx","position":7,"hasCont":false,"func":{"$type":"GlobalVar","position":8,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":9,"hasCont":false,"func":{"$type":"CallEx","position":10,"hasCont":false,"func":{"$type":"GlobalVar","position":11,"name":{"$type":"TrStr","value":"g","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":12,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"gen","isInterned":false}},"rhs":{"$type":"CallEx","position":13,"hasCont":false,"func":{"$type":"GlobalVar","position":14,"name":{"$type":"TrStr","value":"u","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":5}}}],"kwargs":[]}},{"$type":"CallEx","position":15,"hasCont":false,"func":{"$type":"GlobalVar","position":16,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"starting gen","isInterned":false}}}],"kwargs":[]},{"$type":"CallEx","position":17,"hasCont":false,"func":{"$type":"GlobalVar","position":18,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":19,"hasCont":false,"func":{"$type":"GlobalVar","position":20,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":21,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":22,"hasCont":false,"func":{"$type":"GlobalVar","position":23,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":24,"hasCont":false,"func":{"$type":"GlobalVar","position":25,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":26,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":27,"hasCont":false,"func":{"$type":"GlobalVar","position":28,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":29,"hasCont":false,"func":{"$type":"GlobalVar","position":30,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":31,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":32,"hasCont":false,"func":{"$type":"GlobalVar","position":33,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":34,"hasCont":false,"func":{"$type":"GlobalVar","position":35,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":36,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":37,"hasCont":false,"func":{"$type":"Attribute","position":38,"hasCont":false,"value":{"$type":"GlobalVar","position":39,"name":{"$type":"TrStr","value":"print","isInterned":false}},"attr":{"$type":"TrStr","value":"__call__","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":40,"hasCont":false,"func":{"$type":"GlobalVar","position":41,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":42,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"k","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":2,"hasvararg":true,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"args","isInterned":false},"1":{"$type":"TrStr","value":"x","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"CallEx","position":1,"hasCont":false,"func":{"$type":"GlobalVar","position":2,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"LocalVar","position":3,"slot":0}}],"kwargs":[]},{"$type":"Return","position":4,"hasCont":false,"value":{"$type":"LocalVar","position":5,"slot":1}}]},"metadata":{"$type":"Metadata","localnames":["args","x"],"freenames":[],"codename":"k","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147713026,2147778565,2147909639,2147581960,2147598336],"compressedPositions":[377520152,2148302871,2147778583,2148499479,2148106263,2148171799,2148433944,2147778584,2148253696]}},"default_args":[{"$type":"DefaultArgEntry","slot":1,"value":{"$type":"Tuple","position":44,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}]}}],"freeslots":[]}},{"$type":"CallEx","position":45,"hasCont":false,"func":{"$type":"GlobalVar","position":46,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":47,"hasCont":false,"func":{"$type":"GlobalVar","position":48,"name":{"$type":"TrStr","value":"k","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":3}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":5}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":6}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"uq","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":2,"allargcount":3,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"a","isInterned":false},"1":{"$type":"TrStr","value":"b","isInterned":false},"2":{"$type":"TrStr","value":"y","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Return","position":1,"hasCont":false,"value":{"$type":"BinOp","position":2,"left":{"$type":"BinOp","position":3,"left":{"$type":"LocalVar","position":4,"slot":0},"right":{"$type":"LocalVar","position":5,"slot":1},"op":0},"right":{"$type":"LocalVar","position":6,"slot":2},"op":0}}]},"metadata":{"$type":"Metadata","localnames":["a","b","y"],"freenames":[],"codename":"uq","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147581955,2147581955,2147778563,2147844102,2147778567,2147598336],"compressedPositions":[478183453,2148827165,2147778589,2148237341,2148565021,2148302877,2148499485,2148777984]}},"default_args":[{"$type":"DefaultArgEntry","slot":2,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"freeslots":[]}},{"$type":"CallEx","position":50,"hasCont":false,"func":{"$type":"GlobalVar","position":51,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":52,"hasCont":false,"func":{"$type":"GlobalVar","position":53,"name":{"$type":"TrStr","value":"uq","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":54,"hasCont":false,"func":{"$type":"GlobalVar","position":55,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":56,"hasCont":false,"func":{"$type":"GlobalVar","position":57,"name":{"$type":"TrStr","value":"uq","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[[{"$type":"TrStr","value":"y","isInterned":false},{"$type":"Constant","o":{"$type":"TrInt","value":3}}]]}}],"kwargs":[]},{"$type":"CallEx","position":58,"hasCont":false,"func":{"$type":"GlobalVar","position":59,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":60,"hasCont":false,"func":{"$type":"GlobalVar","position":61,"name":{"$type":"TrStr","value":"dict","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"List","position":62,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Tuple","position":63,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}]}}]}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":64,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"AugAssign","position":65,"op":0,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"CallEx","position":66,"hasCont":false,"func":{"$type":"GlobalVar","position":67,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":68,"name":{"$type":"TrStr","value":"z","isInterned":false}}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"test1","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":2,"hasCont":true,"test":{"$type":"CmpOp","position":3,"op":15,"left":{"$type":"LocalVar","position":4,"slot":0},"comparators":[{"$type":"Constant","o":{"$type":"TrInt","value":10000000}}]},"body":{"$type":"Block","hasCont":true,"suite":[{"$type":"AugAssign","position":5,"op":0,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"Yield","position":6,"value":{"$type":"LocalVar","position":7,"slot":0}}]},"orelse":null}]},"metadata":{"$type":"Metadata","localnames":["x"],"freenames":[],"codename":"test1","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147713028,2147581957,2147909637,2147975176,2148106250,2147581963,2147598336],"compressedPositions":[645955626,2148499495,2147778599,2148106280,2147778600,2148171816,2148958248,2148237353,2148040745,2148433962,2148040746,2148450304]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"test2","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":2,"hasCont":false,"test":{"$type":"CmpOp","position":3,"op":15,"left":{"$type":"LocalVar","position":4,"slot":0},"comparators":[{"$type":"Constant","o":{"$type":"TrInt","value":10000000}}]},"body":{"$type":"Block","hasCont":false,"suite":[{"$type":"AugAssign","position":5,"op":0,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}]},"orelse":null},{"$type":"Return","position":6,"hasCont":false,"value":{"$type":"LocalVar","position":7,"slot":0}}]},"metadata":{"$type":"Metadata","localnames":["x"],"freenames":[],"codename":"test2","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147713028,2147844102,2147975174,2148040713,2147844106,2147581963,2147598336],"compressedPositions":[729841711,2148302892,2147778604,2148106285,2147778606,2148433965,2148171821,2148958253,2148237358,2148040751,2147778607,2148253696]}},"default_args":[],"freeslots":[]}},{"$type":"CallEx","position":71,"hasCont":false,"func":{"$type":"GlobalVar","position":72,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},{"$type":"CallEx","position":73,"hasCont":false,"func":{"$type":"GlobalVar","position":74,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},{"$type":"CallEx","position":75,"hasCont":false,"func":{"$type":"GlobalVar","position":76,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"f","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"CallEx","position":1,"hasCont":true,"func":{"$type":"GlobalVar","position":2,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"s2","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Yield","position":3,"value":{"$type":"Constant","o":{"$type":"TrInt","value":5}}}}],"kwargs":[]}]},"metadata":{"$type":"Metadata","localnames":[],"freenames":[],"codename":"f","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147581954,2147713028,2147860480],"compressedPositions":[1082163265,2149220417,2147778625,2148106305,2148630593,2149105664]}},"default_args":[],"freeslots":[]}},{"$type":"CallEx","position":78,"hasCont":false,"func":{"$type":"GlobalVar","position":79,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":9}}}],"kwargs":[]},{"$type":"Assign","position":80,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"c","isInterned":false}},"rhs":{"$type":"CallEx","position":81,"hasCont":false,"func":{"$type":"GlobalVar","position":82,"name":{"$type":"TrStr","value":"f","isInterned":false}},"args":[],"kwargs":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"k","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"YieldFrom","position":1,"value":{"$type":"GlobalVar","position":2,"name":{"$type":"TrStr","value":"c","isInterned":false}}}]},"metadata":{"$type":"Metadata","localnames":[],"freenames":[],"codename":"k","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147581955,2147598336],"compressedPositions":[1166049350,2148565062,2147778630,2148515840]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":84,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"CallEx","position":85,"hasCont":false,"func":{"$type":"Attribute","position":86,"hasCont":false,"value":{"$type":"GlobalVar","position":87,"name":{"$type":"TrStr","value":"c","isInterned":false}},"attr":{"$type":"TrStr","value":"send","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrNone"}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"NamedExpr","position":88,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"x","isInterned":false}},"expr":{"$type":"CallEx","position":89,"hasCont":false,"func":{"$type":"GlobalVar","position":90,"name":{"$type":"TrStr","value":"ref","isInterned":false}},"args":[],"kwargs":[]}}}],"kwargs":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"S","isInterned":false}},"rhs":{"$type":"DefClass","position":0,"hasCont":false,"bases":[],"body":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":3,"allargcount":3,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"self","isInterned":false},"1":{"$type":"TrStr","value":"x","isInterned":false},"2":{"$type":"TrStr","value":"y","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreAttr","position":3,"hasCont":false,"attr":{"$type":"TrStr","value":"x","isInterned":false},"value":{"$type":"LocalVar","position":4,"slot":0}},"rhs":{"$type":"LocalVar","position":2,"slot":1}},{"$type":"Assign","position":5,"hasCont":false,"lhs":{"$type":"StoreAttr","position":7,"hasCont":false,"attr":{"$type":"TrStr","value":"y","isInterned":false},"value":{"$type":"LocalVar","position":8,"slot":0}},"rhs":{"$type":"LocalVar","position":6,"slot":2}}]},"metadata":{"$type":"Metadata","localnames":["self","x","y"],"freenames":[],"codename":"__init__","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147713028,2147713026,2147844098,2147909639,2147581960,2147581959,2148106247,2148188160],"compressedPositions":[1535116416,1568674432,1551894656,1551897216,1551896960,1551896192,1551895680,1568671872,1568674176,1568673408,1568672960]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"self","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Return","position":1,"hasCont":false,"value":{"$type":"BinOp","position":2,"left":{"$type":"BinOp","position":3,"left":{"$type":"BinOp","position":4,"left":{"$type":"BinOp","position":5,"left":{"$type":"BinOp","position":6,"left":{"$type":"Constant","o":{"$type":"TrStr","value":"S","isInterned":false}},"right":{"$type":"Constant","o":{"$type":"TrStr","value":"(","isInterned":false}},"op":0},"right":{"$type":"CallEx","position":7,"hasCont":false,"func":{"$type":"GlobalVar","position":8,"name":{"$type":"TrStr","value":"str","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Attribute","position":9,"hasCont":false,"value":{"$type":"LocalVar","position":10,"slot":0},"attr":{"$type":"TrStr","value":"x","isInterned":false}}}],"kwargs":[]},"op":0},"right":{"$type":"Constant","o":{"$type":"TrStr","value":", ","isInterned":false}},"op":0},"right":{"$type":"CallEx","position":11,"hasCont":false,"func":{"$type":"GlobalVar","position":12,"name":{"$type":"TrStr","value":"str","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Attribute","position":13,"hasCont":false,"value":{"$type":"LocalVar","position":14,"slot":0},"attr":{"$type":"TrStr","value":"y","isInterned":false}}}],"kwargs":[]},"op":0},"right":{"$type":"Constant","o":{"$type":"TrStr","value":")","isInterned":false}},"op":0}}]},"metadata":{"$type":"Metadata","localnames":["self"],"freenames":[],"codename":"__repr__","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147581955,2147581955,2147778563,2147844099,2147909635,2147975176,2147909640,2148106250,2148237322,2148302861,2147778573,2148433935,2148565007,2148646912],"compressedPositions":[1585448064,1602240896,1602226304,1602228096,1602239360,1602235776,1602233984,1602230400,1602231168,1602231936,1602232192,1602233728,1602233216,1602236544,1602237312,1602237568,1602239104,1602238656]}},"default_args":[],"freeslots":[]}}]},"metadata":{"$type":"Metadata","localnames":["__init__","__repr__"],"freenames":[],"codename":"S","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2147581954,2147713028,2147598336],"compressedPositions":[1518370911,2151776347,2147778653,2148696158,2147794944]}},"default_args":[],"freeslots":[]}}},{"$type":"Assign","position":92,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"a","isInterned":false}},"rhs":{"$type":"CallEx","position":93,"hasCont":false,"func":{"$type":"GlobalVar","position":94,"name":{"$type":"TrStr","value":"S","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}},{"$type":"CallEx","position":95,"hasCont":false,"func":{"$type":"GlobalVar","position":96,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":97,"name":{"$type":"TrStr","value":"a","isInterned":false}}}],"kwargs":[]},{"$type":"Assign","position":98,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"CmpOp","position":99,"op":13,"left":{"$type":"Constant","o":{"$type":"TrFloat","value":1.0}},"comparators":[{"$type":"Constant","o":{"$type":"TrFloat","value":2.0}}]}}]},"metadata":{"$type":"Metadata","localnames":[],"freenames":[],"codename":"<module>","filename":"test.src.py","sourceCode":"x = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\nclass S:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\na = S(1, 2)\n\nprint(a)\n\n\nz = 1.0 == 2.0","compressedSpanPointers":[2155905025,2147647491,2147778563,2147647493,2147909639,2148040713,2148171787,2148171788,2148368398,2148368399,2148368400,2148630546,2148761618,2148761620,2148892694,2148892695,2149089305,2149089306,2149285916,2149285917,2149482527,2149613601,2149613602,2149810212,2149810213,2150006823,2150137897,2150137898,2150334508,2150334509,2150531119,2150662193,2150662194,2150858804,2150858805,2151055415,2151186489,2151186490,2151186491,2151448637,2151448638,2151645248,2151776322,2151907396,2152038470,2152038471,2152235081,2152235082,2152431692,2152562766,2152562767,2152759377,2152759378,2152955988,2152955989,2153152599,2153152600,2153349210,2153349211,2153545821,2153545822,2153742432,2153873506,2154004580,2154135654,2154266728,2154266729,2154463339,2154594413,2154725487,2154856561,2154856562,2155053172,2155053173,2155249783,2155249784,2155446394,2155577468,2155577469,2155774079,2147549312,2139095296,2147549568,16941057,58720516,2147550592,17203201,92274950,2147551104,17203201,142606601,2147551872,17530881,176161035,2147552384,17661953,243269903,2147553408,17924097,276824337,2147553920,18055169,343933203,2147554688,18251777,394264856,2147555712,18513921,432013312],"compressedPositions":[25198593,2147844098,2155872896,343933568,192938624,142607488,2147844122,2147975296,192941952,209747980,2148433932,2147844108,2147909644,2148368396,2148171788,2147975182,2155875968,176164480,109055616,125833088,2148499477,2148499461,2148565120,276828288,276825472,276825728,276828032,276826752,276827008,276827776,293634065,2148565009,2147844113,2147909649,2148499473,2148171793,2148237329,2148433938,2155876992,276828800,92279424,109056640,260051584,176165504,192942720,243274624,2148761616,2148761605,2148761606,2148761615,2148761610,2148761611,2148761614,2148827264,343939456,343936640,343934336,343936896,343939200,343937920,343938176,343938944,377520152,2148302870,2148499478,2148892698,2155879040,394271360,92281472,109058688,377494144,125836416,2149416980,2149548160,528486272,528483712,528483968,528486016,528484480,545292320,2148827168,2147844128,2147909664,2148761632,2148040737,2155880832,360718720,92283264,109060480,343941504,176169344,192946560,327164288,209723776,310387584,2149810181,2149875840,612370048,629178405,2148040741,2147844133,2147909669,2147975206,2155883136,260057984,2150596620,2151383168,998246528,998245760,1015054396,2148040764,2147844157,2155888000,142622080,92291200,2151776282,2151841920,1115687040,1115686272,1132494915,2147975235,2147778627,2147844165,2155890304,276842624,2152235036,2152235012,2152235018,2152235013,2152235025,2152235035,2152235030,2152235033,2153414784,1602240896,1635811425,2148237409,2147778657,2147844195,2155897728,142631808,92300160,109077376,125855360,2154201102,2154201092,3221225472]}}