%%
from __future__ import annotations
%%

%mkrepl
name : TNAME -> str($1)

list{e} : e -> [$1]
        | list{e} e  -> append($1, $2) 

seplist{sep, e} : e -> [$1]
                | seplist{sep, e} sep e  -> append($1, $3)
                
nullable{seq} :     -> []
              | seq -> $1
            

%%

from dataclasses import dataclass, replace
from pyrsistent import PVector, pvector

def append(self, x):
    self.append(x)
    return self

@dataclass(frozen=True)
class TArr:
    eltype : Type

@dataclass(frozen=True)
class TTup:
    eltypes : PVector[Type]

@dataclass(frozen=True)
class TName:
    name: str


@dataclass(frozen=True)
class Field:
    type: Type
    name: str

Type = TName | TTup | TArr
    
@dataclass(frozen=True)
class Def:
    name: str
    fields: PVector[Field] = pvector([])
    tag: int = -1

    def __iter__(self):
        yield from self.fields
    def __len__(self):
        return len(self.fields)

tag_counter = [0]

def next_tag():
    x = tag_counter[0]
    tag_counter[0] += 1
    return x
%%

type : "(" seplist{",", type} ")" -> TTup(pvector($2))
     | type "[" "]"               -> TArr($1)
     | name                       -> TName($1)

field : name ":" type -> Field($3, $1)
      | type name     -> Field($1, $2)

topl : name "(" nullable{seplist{",", field}}  ")" -> \
        Def(name= $1, fields=$3, tag=next_tag())

start : list{topl} -> $1


%import common.WS
%import common.ESCAPED_STRING
%import common.LETTER
%import common.DIGIT
%ignore WS
%ignore COMMENT
COMMENT: /\s*/ "//" /[^\n]/*
TNAME: ("_"|"$"|LETTER) ("_"|"$"|LETTER|DIGIT)*
ESCAPED_CODE : /\[%[^%]*?%\]/
