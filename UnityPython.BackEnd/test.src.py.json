{"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "x", "isInterned": false}}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "Assign", "position": 2, "hasCont": false, "lhs": {"$type": "StoreListEx", "position": 4, "hasCont": false, "before": [{"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "x", "isInterned": false}}], "unpack": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "z", "isInterned": false}}, "after": [{"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "y", "isInterned": false}}]}, "rhs": {"$type": "List", "position": 3, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}]}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "g", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 1, "allargcount": 1, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "u", "isInterned": false}}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Return", "position": 1, "hasCont": false, "value": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 1, "allargcount": 1, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "x", "isInterned": false}}, "code": {"$type": "Return", "position": 3, "hasCont": false, "value": {"$type": "BinOp", "position": 1, "left": {"$type": "LocalVar", "position": 2, "slot": 0}, "right": {"$type": "FreeVar", "position": 3, "slot": 0}, "op": 0}}, "metadata": {"$type": "Metadata", "localnames": ["x"], "freenames": ["u"], "codename": "<lambda>", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147581954, 2147713028, 2147598336], "compressedPositions": [109054848, 109058688, 109057408, 109057664, 109058496]}}, "default_args": [], "freeslots": [0]}}]}, "metadata": {"$type": "Metadata", "localnames": ["u"], "freenames": [], "codename": "g", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147598336], "compressedPositions": [92307462, 2149220358, 2147794944]}}, "default_args": [], "freeslots": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "u", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 1, "allargcount": 1, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "x", "isInterned": false}}, "code": {"$type": "Block", "hasCont": true, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 1}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 0}}}, {"$type": "While", "position": 2, "hasCont": true, "test": {"$type": "CmpOp", "position": 3, "op": 15, "left": {"$type": "LocalVar", "position": 4, "slot": 1}, "comparators": [{"$type": "LocalVar", "position": 5, "slot": 0}]}, "body": {"$type": "Block", "hasCont": true, "suite": [{"$type": "Assign", "position": 6, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 1}, "rhs": {"$type": "BinOp", "position": 7, "left": {"$type": "LocalVar", "position": 8, "slot": 1}, "right": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}, "op": 0}}, {"$type": "Yield", "position": 9, "value": {"$type": "LocalVar", "position": 10, "slot": 1}}]}, "orelse": null}]}, "metadata": {"$type": "Metadata", "localnames": ["x", "i"], "freenames": [], "codename": "u", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147713028, 2147581957, 2147909637, 2147975176, 2147909641, 2148171787, 2148171787, 2148302861, 2147581966, 2147598336], "compressedPositions": [142639116, 2148499465, 2147778569, 2148106250, 2147778570, 2148171786, 2148499466, 2148237322, 2148433931, 2148040715, 2148630539, 2148302859, 2148368396, 2148040716, 2148450304]}}, "default_args": [], "freeslots": []}}, {"$type": "CallEx", "position": 7, "hasCont": false, "func": {"$type": "GlobalVar", "position": 8, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 9, "hasCont": false, "func": {"$type": "CallEx", "position": 10, "hasCont": false, "func": {"$type": "GlobalVar", "position": 11, "name": {"$type": "TrStr", "value": "g", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}], "kwargs": []}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}], "kwargs": []}}], "kwargs": []}, {"$type": "Assign", "position": 12, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "gen", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 13, "hasCont": false, "func": {"$type": "GlobalVar", "position": 14, "name": {"$type": "TrStr", "value": "u", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 5}}}], "kwargs": []}}, {"$type": "CallEx", "position": 15, "hasCont": false, "func": {"$type": "GlobalVar", "position": 16, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "starting gen", "isInterned": false}}}], "kwargs": []}, {"$type": "CallEx", "position": 17, "hasCont": false, "func": {"$type": "GlobalVar", "position": 18, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 19, "hasCont": false, "func": {"$type": "GlobalVar", "position": 20, "name": {"$type": "TrStr", "value": "next", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 21, "name": {"$type": "TrStr", "value": "gen", "isInterned": false}}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 22, "hasCont": false, "func": {"$type": "GlobalVar", "position": 23, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 24, "hasCont": false, "func": {"$type": "GlobalVar", "position": 25, "name": {"$type": "TrStr", "value": "next", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 26, "name": {"$type": "TrStr", "value": "gen", "isInterned": false}}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 27, "hasCont": false, "func": {"$type": "GlobalVar", "position": 28, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 29, "hasCont": false, "func": {"$type": "GlobalVar", "position": 30, "name": {"$type": "TrStr", "value": "next", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 31, "name": {"$type": "TrStr", "value": "gen", "isInterned": false}}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 32, "hasCont": false, "func": {"$type": "GlobalVar", "position": 33, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 34, "hasCont": false, "func": {"$type": "GlobalVar", "position": 35, "name": {"$type": "TrStr", "value": "next", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 36, "name": {"$type": "TrStr", "value": "gen", "isInterned": false}}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 37, "hasCont": false, "func": {"$type": "Attribute", "position": 38, "hasCont": false, "value": {"$type": "GlobalVar", "position": 39, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "attr": {"$type": "TrStr", "value": "__call__", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 40, "hasCont": false, "func": {"$type": "GlobalVar", "position": 41, "name": {"$type": "TrStr", "value": "next", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 42, "name": {"$type": "TrStr", "value": "gen", "isInterned": false}}}], "kwargs": []}}], "kwargs": []}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "k", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 2, "hasvararg": true, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "args", "isInterned": false}, "1": {"$type": "TrStr", "value": "x", "isInterned": false}}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "CallEx", "position": 1, "hasCont": false, "func": {"$type": "GlobalVar", "position": 2, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "LocalVar", "position": 3, "slot": 0}}], "kwargs": []}, {"$type": "Return", "position": 4, "hasCont": false, "value": {"$type": "LocalVar", "position": 5, "slot": 1}}]}, "metadata": {"$type": "Metadata", "localnames": ["args", "x"], "freenames": [], "codename": "k", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147713026, 2147778565, 2147909639, 2147581960, 2147598336], "compressedPositions": [394297369, 2148302872, 2147778584, 2148499480, 2148106264, 2148171800, 2148433945, 2147778585, 2148253696]}}, "default_args": [{"$type": "DefaultArgEntry", "slot": 1, "value": {"$type": "Tuple", "position": 44, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}]}}], "freeslots": []}}, {"$type": "CallEx", "position": 45, "hasCont": false, "func": {"$type": "GlobalVar", "position": 46, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 47, "hasCont": false, "func": {"$type": "GlobalVar", "position": 48, "name": {"$type": "TrStr", "value": "k", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 5}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 6}}}], "kwargs": []}}], "kwargs": []}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "uq", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 2, "allargcount": 3, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "a", "isInterned": false}, "1": {"$type": "TrStr", "value": "b", "isInterned": false}, "2": {"$type": "TrStr", "value": "y", "isInterned": false}}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Return", "position": 1, "hasCont": false, "value": {"$type": "BinOp", "position": 2, "left": {"$type": "BinOp", "position": 3, "left": {"$type": "LocalVar", "position": 4, "slot": 0}, "right": {"$type": "LocalVar", "position": 5, "slot": 1}, "op": 0}, "right": {"$type": "LocalVar", "position": 6, "slot": 2}, "op": 0}}]}, "metadata": {"$type": "Metadata", "localnames": ["a", "b", "y"], "freenames": [], "codename": "uq", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147581955, 2147581955, 2147778563, 2147844102, 2147778567, 2147598336], "compressedPositions": [494960670, 2148827166, 2147778590, 2148237342, 2148565022, 2148302878, 2148499486, 2148777984]}}, "default_args": [{"$type": "DefaultArgEntry", "slot": 2, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}], "freeslots": []}}, {"$type": "CallEx", "position": 50, "hasCont": false, "func": {"$type": "GlobalVar", "position": 51, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 52, "hasCont": false, "func": {"$type": "GlobalVar", "position": 53, "name": {"$type": "TrStr", "value": "uq", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 54, "hasCont": false, "func": {"$type": "GlobalVar", "position": 55, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 56, "hasCont": false, "func": {"$type": "GlobalVar", "position": 57, "name": {"$type": "TrStr", "value": "uq", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}], "kwargs": [[{"$type": "TrStr", "value": "y", "isInterned": false}, {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}]]}}], "kwargs": []}, {"$type": "CallEx", "position": 58, "hasCont": false, "func": {"$type": "GlobalVar", "position": 59, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 60, "hasCont": false, "func": {"$type": "GlobalVar", "position": 61, "name": {"$type": "TrStr", "value": "dict", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "List", "position": 62, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Tuple", "position": 63, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}]}}]}}], "kwargs": []}}], "kwargs": []}, {"$type": "Assign", "position": 64, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "z", "isInterned": false}}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "AugAssign", "position": 65, "op": 0, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "z", "isInterned": false}}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "CallEx", "position": 66, "hasCont": false, "func": {"$type": "GlobalVar", "position": 67, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 68, "name": {"$type": "TrStr", "value": "z", "isInterned": false}}}], "kwargs": []}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "test1", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": true, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 0}}}, {"$type": "While", "position": 2, "hasCont": true, "test": {"$type": "CmpOp", "position": 3, "op": 15, "left": {"$type": "LocalVar", "position": 4, "slot": 0}, "comparators": [{"$type": "Constant", "o": {"$type": "TrInt", "value": 10000000}}]}, "body": {"$type": "Block", "hasCont": true, "suite": [{"$type": "AugAssign", "position": 5, "op": 0, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "Yield", "position": 6, "value": {"$type": "LocalVar", "position": 7, "slot": 0}}]}, "orelse": null}]}, "metadata": {"$type": "Metadata", "localnames": ["x"], "freenames": [], "codename": "test1", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147713028, 2147581957, 2147909637, 2147975176, 2148106250, 2147581963, 2147598336], "compressedPositions": [662732843, 2148499496, 2147778600, 2148106281, 2147778601, 2148171817, 2148958249, 2148237354, 2148040746, 2148433963, 2148040747, 2148450304]}}, "default_args": [], "freeslots": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "test2", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 0}}}, {"$type": "While", "position": 2, "hasCont": false, "test": {"$type": "CmpOp", "position": 3, "op": 15, "left": {"$type": "LocalVar", "position": 4, "slot": 0}, "comparators": [{"$type": "Constant", "o": {"$type": "TrInt", "value": 10000000}}]}, "body": {"$type": "Block", "hasCont": false, "suite": [{"$type": "AugAssign", "position": 5, "op": 0, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}]}, "orelse": null}, {"$type": "Return", "position": 6, "hasCont": false, "value": {"$type": "LocalVar", "position": 7, "slot": 0}}]}, "metadata": {"$type": "Metadata", "localnames": ["x"], "freenames": [], "codename": "test2", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147713028, 2147844102, 2147975174, 2148040713, 2147844106, 2147581963, 2147598336], "compressedPositions": [746618928, 2148302893, 2147778605, 2148106286, 2147778607, 2148433966, 2148171822, 2148958254, 2148237359, 2148040752, 2147778608, 2148253696]}}, "default_args": [], "freeslots": []}}, {"$type": "CallEx", "position": 71, "hasCont": false, "func": {"$type": "GlobalVar", "position": 72, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}], "kwargs": []}, {"$type": "CallEx", "position": 73, "hasCont": false, "func": {"$type": "GlobalVar", "position": 74, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}], "kwargs": []}, {"$type": "CallEx", "position": 75, "hasCont": false, "func": {"$type": "GlobalVar", "position": 76, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}], "kwargs": []}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "f", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": true, "suite": [{"$type": "CallEx", "position": 1, "hasCont": true, "func": {"$type": "GlobalVar", "position": 2, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "s2", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Yield", "position": 3, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 5}}}}], "kwargs": []}]}, "metadata": {"$type": "Metadata", "localnames": [], "freenames": [], "codename": "f", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147581954, 2147713028, 2147860480], "compressedPositions": [1098940482, 2149220418, 2147778626, 2148106306, 2148630594, 2149105664]}}, "default_args": [], "freeslots": []}}, {"$type": "CallEx", "position": 78, "hasCont": false, "func": {"$type": "GlobalVar", "position": 79, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 9}}}], "kwargs": []}, {"$type": "Assign", "position": 80, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "c", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 81, "hasCont": false, "func": {"$type": "GlobalVar", "position": 82, "name": {"$type": "TrStr", "value": "f", "isInterned": false}}, "args": [], "kwargs": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "k", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": true, "suite": [{"$type": "YieldFrom", "position": 1, "value": {"$type": "GlobalVar", "position": 2, "name": {"$type": "TrStr", "value": "c", "isInterned": false}}}]}, "metadata": {"$type": "Metadata", "localnames": [], "freenames": [], "codename": "k", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147581955, 2147598336], "compressedPositions": [1182826567, 2148565063, 2147778631, 2148515840]}}, "default_args": [], "freeslots": []}}, {"$type": "Assign", "position": 84, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "z", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 85, "hasCont": false, "func": {"$type": "Attribute", "position": 86, "hasCont": false, "value": {"$type": "GlobalVar", "position": 87, "name": {"$type": "TrStr", "value": "c", "isInterned": false}}, "attr": {"$type": "TrStr", "value": "send", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrNone"}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "NamedExpr", "position": 88, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "x", "isInterned": false}}, "expr": {"$type": "CallEx", "position": 89, "hasCont": false, "func": {"$type": "GlobalVar", "position": 90, "name": {"$type": "TrStr", "value": "ref", "isInterned": false}}, "args": [], "kwargs": []}}}], "kwargs": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "__init__", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 3, "allargcount": 3, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "self", "isInterned": false}, "1": {"$type": "TrStr", "value": "x", "isInterned": false}, "2": {"$type": "TrStr", "value": "y", "isInterned": false}}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 3, "hasCont": false, "attr": {"$type": "TrStr", "value": "x", "isInterned": false}, "value": {"$type": "LocalVar", "position": 4, "slot": 0}}, "rhs": {"$type": "LocalVar", "position": 2, "slot": 1}}, {"$type": "Assign", "position": 5, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 7, "hasCont": false, "attr": {"$type": "TrStr", "value": "y", "isInterned": false}, "value": {"$type": "LocalVar", "position": 8, "slot": 0}}, "rhs": {"$type": "LocalVar", "position": 6, "slot": 2}}, {"$type": "Assign", "position": 9, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 13, "hasCont": false, "attr": {"$type": "TrStr", "value": "z", "isInterned": false}, "value": {"$type": "LocalVar", "position": 14, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 10, "left": {"$type": "LocalVar", "position": 11, "slot": 1}, "right": {"$type": "LocalVar", "position": 12, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 15, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 19, "hasCont": false, "attr": {"$type": "TrStr", "value": "w", "isInterned": false}, "value": {"$type": "LocalVar", "position": 20, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 16, "left": {"$type": "LocalVar", "position": 17, "slot": 1}, "right": {"$type": "LocalVar", "position": 18, "slot": 2}, "op": 2}}, {"$type": "Assign", "position": 21, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 25, "hasCont": false, "attr": {"$type": "TrStr", "value": "u1", "isInterned": false}, "value": {"$type": "LocalVar", "position": 26, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 22, "left": {"$type": "LocalVar", "position": 23, "slot": 1}, "right": {"$type": "LocalVar", "position": 24, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 27, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 31, "hasCont": false, "attr": {"$type": "TrStr", "value": "u2", "isInterned": false}, "value": {"$type": "LocalVar", "position": 32, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 28, "left": {"$type": "LocalVar", "position": 29, "slot": 1}, "right": {"$type": "LocalVar", "position": 30, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 33, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 37, "hasCont": false, "attr": {"$type": "TrStr", "value": "u3", "isInterned": false}, "value": {"$type": "LocalVar", "position": 38, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 34, "left": {"$type": "LocalVar", "position": 35, "slot": 1}, "right": {"$type": "LocalVar", "position": 36, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 39, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 43, "hasCont": false, "attr": {"$type": "TrStr", "value": "u4", "isInterned": false}, "value": {"$type": "LocalVar", "position": 44, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 40, "left": {"$type": "LocalVar", "position": 41, "slot": 1}, "right": {"$type": "LocalVar", "position": 42, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 45, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 49, "hasCont": false, "attr": {"$type": "TrStr", "value": "u5", "isInterned": false}, "value": {"$type": "LocalVar", "position": 50, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 46, "left": {"$type": "LocalVar", "position": 47, "slot": 1}, "right": {"$type": "LocalVar", "position": 48, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 51, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 55, "hasCont": false, "attr": {"$type": "TrStr", "value": "u6", "isInterned": false}, "value": {"$type": "LocalVar", "position": 56, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 52, "left": {"$type": "LocalVar", "position": 53, "slot": 1}, "right": {"$type": "LocalVar", "position": 54, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 57, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 61, "hasCont": false, "attr": {"$type": "TrStr", "value": "u7", "isInterned": false}, "value": {"$type": "LocalVar", "position": 62, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 58, "left": {"$type": "LocalVar", "position": 59, "slot": 1}, "right": {"$type": "LocalVar", "position": 60, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 63, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 67, "hasCont": false, "attr": {"$type": "TrStr", "value": "v1", "isInterned": false}, "value": {"$type": "LocalVar", "position": 68, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 64, "left": {"$type": "LocalVar", "position": 65, "slot": 1}, "right": {"$type": "LocalVar", "position": 66, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 69, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 73, "hasCont": false, "attr": {"$type": "TrStr", "value": "v2", "isInterned": false}, "value": {"$type": "LocalVar", "position": 74, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 70, "left": {"$type": "LocalVar", "position": 71, "slot": 1}, "right": {"$type": "LocalVar", "position": 72, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 75, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 79, "hasCont": false, "attr": {"$type": "TrStr", "value": "v3", "isInterned": false}, "value": {"$type": "LocalVar", "position": 80, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 76, "left": {"$type": "LocalVar", "position": 77, "slot": 1}, "right": {"$type": "LocalVar", "position": 78, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 81, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 85, "hasCont": false, "attr": {"$type": "TrStr", "value": "v4", "isInterned": false}, "value": {"$type": "LocalVar", "position": 86, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 82, "left": {"$type": "LocalVar", "position": 83, "slot": 1}, "right": {"$type": "LocalVar", "position": 84, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 87, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 91, "hasCont": false, "attr": {"$type": "TrStr", "value": "v5", "isInterned": false}, "value": {"$type": "LocalVar", "position": 92, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 88, "left": {"$type": "LocalVar", "position": 89, "slot": 1}, "right": {"$type": "LocalVar", "position": 90, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 93, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 97, "hasCont": false, "attr": {"$type": "TrStr", "value": "v6", "isInterned": false}, "value": {"$type": "LocalVar", "position": 98, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 94, "left": {"$type": "LocalVar", "position": 95, "slot": 1}, "right": {"$type": "LocalVar", "position": 96, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 99, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 103, "hasCont": false, "attr": {"$type": "TrStr", "value": "v7", "isInterned": false}, "value": {"$type": "LocalVar", "position": 104, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 100, "left": {"$type": "LocalVar", "position": 101, "slot": 1}, "right": {"$type": "LocalVar", "position": 102, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 105, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 109, "hasCont": false, "attr": {"$type": "TrStr", "value": "v8", "isInterned": false}, "value": {"$type": "LocalVar", "position": 110, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 106, "left": {"$type": "LocalVar", "position": 107, "slot": 1}, "right": {"$type": "LocalVar", "position": 108, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 111, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 115, "hasCont": false, "attr": {"$type": "TrStr", "value": "v9", "isInterned": false}, "value": {"$type": "LocalVar", "position": 116, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 112, "left": {"$type": "LocalVar", "position": 113, "slot": 1}, "right": {"$type": "LocalVar", "position": 114, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 117, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 118, "hasCont": false, "attr": {"$type": "TrStr", "value": "w9", "isInterned": false}, "value": {"$type": "LocalVar", "position": 119, "slot": 0}}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 10}}}, {"$type": "Assign", "position": 120, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 124, "hasCont": false, "attr": {"$type": "TrStr", "value": "w1", "isInterned": false}, "value": {"$type": "LocalVar", "position": 125, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 121, "left": {"$type": "LocalVar", "position": 122, "slot": 1}, "right": {"$type": "LocalVar", "position": 123, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 126, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 130, "hasCont": false, "attr": {"$type": "TrStr", "value": "w2", "isInterned": false}, "value": {"$type": "LocalVar", "position": 131, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 127, "left": {"$type": "LocalVar", "position": 128, "slot": 1}, "right": {"$type": "LocalVar", "position": 129, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 132, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 136, "hasCont": false, "attr": {"$type": "TrStr", "value": "w3", "isInterned": false}, "value": {"$type": "LocalVar", "position": 137, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 133, "left": {"$type": "LocalVar", "position": 134, "slot": 1}, "right": {"$type": "LocalVar", "position": 135, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 138, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 142, "hasCont": false, "attr": {"$type": "TrStr", "value": "w4", "isInterned": false}, "value": {"$type": "LocalVar", "position": 143, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 139, "left": {"$type": "LocalVar", "position": 140, "slot": 1}, "right": {"$type": "LocalVar", "position": 141, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 144, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 148, "hasCont": false, "attr": {"$type": "TrStr", "value": "w5", "isInterned": false}, "value": {"$type": "LocalVar", "position": 149, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 145, "left": {"$type": "LocalVar", "position": 146, "slot": 1}, "right": {"$type": "LocalVar", "position": 147, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 150, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 154, "hasCont": false, "attr": {"$type": "TrStr", "value": "w6", "isInterned": false}, "value": {"$type": "LocalVar", "position": 155, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 151, "left": {"$type": "LocalVar", "position": 152, "slot": 1}, "right": {"$type": "LocalVar", "position": 153, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 156, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 160, "hasCont": false, "attr": {"$type": "TrStr", "value": "w7", "isInterned": false}, "value": {"$type": "LocalVar", "position": 161, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 157, "left": {"$type": "LocalVar", "position": 158, "slot": 1}, "right": {"$type": "LocalVar", "position": 159, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 162, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 166, "hasCont": false, "attr": {"$type": "TrStr", "value": "w8", "isInterned": false}, "value": {"$type": "LocalVar", "position": 167, "slot": 0}}, "rhs": {"$type": "BinOp", "position": 163, "left": {"$type": "LocalVar", "position": 164, "slot": 1}, "right": {"$type": "LocalVar", "position": 165, "slot": 2}, "op": 0}}, {"$type": "Assign", "position": 168, "hasCont": false, "lhs": {"$type": "StoreAttr", "position": 169, "hasCont": false, "attr": {"$type": "TrStr", "value": "z", "isInterned": false}, "value": {"$type": "LocalVar", "position": 170, "slot": 0}}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 0}}}]}, "metadata": {"$type": "Metadata", "localnames": ["self", "x", "y"], "freenames": [], "codename": "__init__", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147713028, 2147713026, 2147844098, 2147909639, 2148040713, 2148040711, 2148171783, 2148237324, 2148368398, 2148368398, 2148499472, 2148368396, 2148630540, 2148696083, 2148827157, 2148827157, 2148958231, 2148827155, 2149089299, 2149154842, 2149285916, 2149285916, 2149416990, 2149285914, 2149548058, 2149613601, 2149744675, 2149744675, 2149875749, 2149744673, 2150006817, 2150072360, 2150203434, 2150203434, 2150334508, 2150203432, 2150465576, 2150531119, 2150662193, 2150662193, 2150793267, 2150662191, 2150924335, 2150989878, 2151120952, 2151120952, 2151252026, 2151120950, 2151383094, 2151448637, 2151579711, 2151579711, 2151710785, 2151579709, 2151841853, 2151907396, 2152038470, 2152038470, 2152169544, 2152038468, 2152300612, 2152366155, 2152497229, 2152497229, 2152628303, 2152497227, 2152759371, 2152824914, 2152955988, 2152955988, 2153087062, 2152955986, 2153218130, 2153283673, 2153414747, 2153414747, 2153545821, 2153414745, 2153676889, 2153742432, 2153873506, 2153873506, 2154004580, 2153873504, 2154135648, 2154201191, 2154332265, 2154332265, 2154463339, 2154332263, 2154594407, 2154659950, 2154791024, 2154791024, 2154922098, 2154791022, 2155053166, 2155118709, 2155249783, 2155249783, 2155380857, 2155249781, 2155511925, 2155577468, 2155708542, 2155708542, 2155839489, 8420736, 2088763649, 2155642881, 41943299, 2147550336, 17137665, 75497733, 2147550848, 17268737, 75497731, 2147551360, 17006593, 159383818, 2147552128, 17465345, 209715466, 2147552640, 17727489, 260047120, 2147553152, 17858561, 293601554, 2147553152, 17727489, 327155982, 2147554432, 18186241, 377487639, 2147554944, 18317313, 411042073, 2147554944, 18186241, 444596501, 2147556224, 18644993, 494928158, 2147556736, 18776065, 528482592, 2147556736, 18644993, 562037020, 2147558016, 19103745, 612368677, 2147558528, 19234817, 645923111, 2147558528, 19103745, 679477539, 2147559808, 19562497, 729809196, 2147560320, 19693569, 763363630, 2147560320, 19562497, 796918058, 2147561600, 20021249, 847249715, 2147562112, 20152321, 880804149, 2147562112, 20021249, 914358577, 2147563392, 20480001, 964690234, 2147563904, 20611073, 998244668, 2147563904, 20480001, 1031799096, 2147565184, 20938753, 1082130753, 2147565696, 21069825, 1115685187, 2147565696, 20938753, 1149239615, 2147566976, 21397505, 2147567232, 21463041, 1182794056, 3221225472], "compressedPositions": [1535148157, 2148434012, 2147778652, 2148434012, 2148368476, 2148171868, 2148040797, 2147778653, 2148434013, 2148368477, 2148171869, 2148040798, 2147778654, 2148696158, 2148368478, 2148434014, 2148630622, 2148171870, 2148040799, 2147778655, 2148696159, 2148368479, 2148434015, 2148630623, 2148171871, 2148040801, 2147778657, 2148761697, 2148434017, 2148499553, 2148696161, 2148237409, 2148040802, 2147778658, 2148761698, 2148434018, 2148499554, 2148696162, 2148237410, 2148040803, 2147778659, 2148761699, 2148434019, 2148499555, 2148696163, 2148237411, 2148040804, 2147778660, 2148761700, 2148434020, 2148499556, 2148696164, 2148237412, 2148040805, 2147778661, 2148761701, 2148434021, 2148499557, 2148696165, 2148237413, 2148040806, 2147778662, 2148761702, 2148434022, 2148499558, 2148696166, 2148237414, 2148040807, 2147778663, 2148761703, 2148434023, 2148499559, 2148696167, 2148237415, 2148040809, 2147778665, 2148761705, 2148434025, 2148499561, 2148696169, 2148237417, 2148040810, 2147778666, 2148761706, 2148434026, 2148499562, 2148696170, 2148237418, 2148040811, 2147778667, 2148761707, 2148434027, 2148499563, 2148696171, 2148237419, 2148040812, 2147778668, 2148761708, 2148434028, 2148499564, 2148696172, 2148237420, 2148040813, 2147778669, 2148761709, 2148434029, 2148499565, 2148696173, 2148237421, 2148040814, 2147778670, 2148761710, 2148434030, 2148499566, 2148696174, 2148237422, 2148040815, 2147778671, 2148761711, 2148434031, 2148499567, 2148696175, 2148237423, 2148040816, 2147778672, 2148761712, 2148434032, 2148499568, 2148696176, 2148237424, 2148040817, 2147778673, 2148761713, 2148434033, 2148499569, 2148696177, 2148237425, 2148040820, 2147778676, 2148565108, 2148237428, 2148040821, 2147778677, 2148761717, 2148434037, 2148499573, 2148696181, 2148237429, 2148040822, 2147778678, 2148761718, 2148434038, 2148499574, 2148696182, 2148237430, 2148040823, 2147778679, 2148761719, 2148434039, 2148499575, 2148696183, 2148237431, 2148040824, 2147778680, 2148761720, 2148434040, 2148499576, 2148696184, 2148237432, 2148040825, 2147778681, 2148761721, 2148434041, 2148499577, 2148696185, 2148237433, 2148040826, 2147778682, 2148761722, 2148434042, 2148499578, 2148696186, 2148237434, 2148040827, 2147778683, 2148761723, 2148434043, 2148499579, 2148696187, 2148237435, 2148040828, 2147778684, 2148761724, 2148434044, 2148499580, 2148696188, 2148237436, 2148040829, 2147778685, 2148171901, 2148057088]}}, "default_args": [], "freeslots": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "__repr__", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 1, "allargcount": 1, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "self", "isInterned": false}}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Return", "position": 1, "hasCont": false, "value": {"$type": "BinOp", "position": 2, "left": {"$type": "BinOp", "position": 3, "left": {"$type": "BinOp", "position": 4, "left": {"$type": "BinOp", "position": 5, "left": {"$type": "BinOp", "position": 6, "left": {"$type": "Constant", "o": {"$type": "TrStr", "value": "S", "isInterned": false}}, "right": {"$type": "Constant", "o": {"$type": "TrStr", "value": "(", "isInterned": false}}, "op": 0}, "right": {"$type": "CallEx", "position": 7, "hasCont": false, "func": {"$type": "GlobalVar", "position": 8, "name": {"$type": "TrStr", "value": "str", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Attribute", "position": 9, "hasCont": false, "value": {"$type": "LocalVar", "position": 10, "slot": 0}, "attr": {"$type": "TrStr", "value": "x", "isInterned": false}}}], "kwargs": []}, "op": 0}, "right": {"$type": "Constant", "o": {"$type": "TrStr", "value": ", ", "isInterned": false}}, "op": 0}, "right": {"$type": "CallEx", "position": 11, "hasCont": false, "func": {"$type": "GlobalVar", "position": 12, "name": {"$type": "TrStr", "value": "str", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Attribute", "position": 13, "hasCont": false, "value": {"$type": "LocalVar", "position": 14, "slot": 0}, "attr": {"$type": "TrStr", "value": "y", "isInterned": false}}}], "kwargs": []}, "op": 0}, "right": {"$type": "Constant", "o": {"$type": "TrStr", "value": ")", "isInterned": false}}, "op": 0}}]}, "metadata": {"$type": "Metadata", "localnames": ["self"], "freenames": [], "codename": "__repr__", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147581955, 2147581955, 2147778563, 2147844099, 2147909635, 2147975176, 2147909640, 2148106250, 2148237322, 2148302861, 2147778573, 2148433935, 2148565007, 2148646912], "compressedPositions": [16810112, 16875581, 2147549568, 75497729, 2148237313, 25180032, 16875561, 2147549568, 578814209, 2148827137, 25171840, 16875546, 2147549568, 461373697, 2149679105, 25173888, 16875564, 2147549568, 796918017, 2150662145, 25179776, 16875572, 3221225472]}}, "default_args": [], "freeslots": []}}, {"$type": "Assign", "position": 93, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "objs", "isInterned": false}}, "rhs": {"$type": "List", "position": 94, "hasCont": false, "elements": []}}, {"$type": "Assign", "position": 95, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "S", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 96, "hasCont": false, "func": {"$type": "GlobalVar", "position": 97, "name": {"$type": "TrStr", "value": "type", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "S", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Tuple", "position": 98, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 99, "name": {"$type": "TrStr", "value": "object", "isInterned": false}}}]}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Dict", "position": 100, "hasCont": false, "entries": [{"$type": "DictEntry", "key": {"$type": "Constant", "o": {"$type": "TrStr", "value": "__init__", "isInterned": false}}, "value": {"$type": "GlobalVar", "position": 101, "name": {"$type": "TrStr", "value": "__init__", "isInterned": false}}}, {"$type": "DictEntry", "key": {"$type": "Constant", "o": {"$type": "TrStr", "value": "__repr__", "isInterned": false}}, "value": {"$type": "GlobalVar", "position": 102, "name": {"$type": "TrStr", "value": "__repr__", "isInterned": false}}}, {"$type": "DictEntry", "key": {"$type": "Constant", "o": {"$type": "TrStr", "value": "U", "isInterned": false}}, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}]}}], "kwargs": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "bench", "isInterned": false}}, "rhs": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 4, "allargcount": 4, "hasvararg": false, "haskwarg": false, "kwindices": {"0": {"$type": "TrStr", "value": "o1", "isInterned": false}, "1": {"$type": "TrStr", "value": "o2", "isInterned": false}, "2": {"$type": "TrStr", "value": "o3", "isInterned": false}, "3": {"$type": "TrStr", "value": "o4", "isInterned": false}}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 4}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 0}}}, {"$type": "Assign", "position": 2, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 5}, "rhs": {"$type": "List", "position": 3, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "LocalVar", "position": 4, "slot": 0}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "LocalVar", "position": 5, "slot": 1}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "LocalVar", "position": 6, "slot": 2}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "LocalVar", "position": 7, "slot": 3}}]}}, {"$type": "ForIn", "position": 8, "hasCont": false, "target": {"$type": "StoreLocal", "slot": 6}, "itr": {"$type": "CallEx", "position": 9, "hasCont": false, "func": {"$type": "GlobalVar", "position": 10, "name": {"$type": "TrStr", "value": "range", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 10000000}}}], "kwargs": []}, "body": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 11, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 4}, "rhs": {"$type": "Attribute", "position": 12, "hasCont": false, "value": {"$type": "Subscript", "position": 13, "hasCont": false, "value": {"$type": "LocalVar", "position": 14, "slot": 5}, "item": {"$type": "BinOp", "position": 15, "left": {"$type": "LocalVar", "position": 16, "slot": 6}, "right": {"$type": "Constant", "o": {"$type": "TrInt", "value": 4}}, "op": 12}}, "attr": {"$type": "TrStr", "value": "U", "isInterned": false}}}]}, "orelse": null}, {"$type": "Return", "position": 17, "hasCont": false, "value": {"$type": "LocalVar", "position": 18, "slot": 4}}]}, "metadata": {"$type": "Metadata", "localnames": ["o1", "o2", "o3", "o4", "k", "os", "i"], "freenames": [], "codename": "bench", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147713028, 2147844102, 2147844103, 2148040713, 2148171787, 2148302861, 2148433935, 2148565009, 2148696081, 2148761620, 2148565013, 2148565013, 2148958229, 2149023768, 2149154840, 2149220379, 2147581980, 2147598336], "compressedPositions": [17531008, 17858572, 2147552384, 75497740, 2148106241, 226493568, 17661977, 2147552640, 159383821, 2148171777, 226495616, 17661966, 2147552640, 276824333, 2148696065, 226497664, 17661974, 2147552640, 411042062, 2147778561, 260052864, 17727501, 2147552896, 478150926, 2148696065, 260049024, 17793036, 2147553152, 360710415, 2148433921, 260050816, 17793044, 2147553152, 276824336, 2147778561, 276827072]}}, "default_args": [], "freeslots": []}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "M", "isInterned": false}}, "rhs": {"$type": "DefClass", "position": 0, "hasCont": false, "bases": [], "body": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 5}}}]}, "metadata": {"$type": "Metadata", "localnames": ["U"], "freenames": [], "codename": "M", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147598336], "compressedPositions": [17989760, 18055177, 2147554176, 79691776]}}, "default_args": [], "freeslots": []}}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "N", "isInterned": false}}, "rhs": {"$type": "DefClass", "position": 0, "hasCont": false, "bases": [], "body": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 30}}}]}, "metadata": {"$type": "Metadata", "localnames": ["U"], "freenames": [], "codename": "N", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147598336], "compressedPositions": [18186368, 18251786, 2147554944, 79691776]}}, "default_args": [], "freeslots": []}}}, {"$type": "Assign", "position": 0, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "LL", "isInterned": false}}, "rhs": {"$type": "DefClass", "position": 0, "hasCont": false, "bases": [], "body": {"$type": "Lambda", "hasCont": false, "fptr": {"$type": "TrFuncPointer", "posargcount": 0, "allargcount": 0, "hasvararg": false, "haskwarg": false, "kwindices": {}, "code": {"$type": "Block", "hasCont": false, "suite": [{"$type": "Assign", "position": 1, "hasCont": false, "lhs": {"$type": "StoreLocal", "slot": 0}, "rhs": {"$type": "Constant", "o": {"$type": "TrInt", "value": 30}}}]}, "metadata": {"$type": "Metadata", "localnames": ["U"], "freenames": [], "codename": "LL", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2147581954, 2147598336], "compressedPositions": [18382976, 18448394, 2147555712, 79691776]}}, "default_args": [], "freeslots": []}}}, {"$type": "Assign", "position": 107, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "a", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 108, "hasCont": false, "func": {"$type": "GlobalVar", "position": 109, "name": {"$type": "TrStr", "value": "time", "isInterned": false}}, "args": [], "kwargs": []}}, {"$type": "Assign", "position": 110, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "xs", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 111, "hasCont": false, "func": {"$type": "GlobalVar", "position": 112, "name": {"$type": "TrStr", "value": "test2", "isInterned": false}}, "args": [], "kwargs": []}}, {"$type": "CallEx", "position": 113, "hasCont": false, "func": {"$type": "GlobalVar", "position": 114, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "value", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 115, "name": {"$type": "TrStr", "value": "xs", "isInterned": false}}}], "kwargs": []}, {"$type": "CallEx", "position": 116, "hasCont": false, "func": {"$type": "GlobalVar", "position": 117, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "time1", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "BinOp", "position": 118, "left": {"$type": "CallEx", "position": 119, "hasCont": false, "func": {"$type": "GlobalVar", "position": 120, "name": {"$type": "TrStr", "value": "time", "isInterned": false}}, "args": [], "kwargs": []}, "right": {"$type": "GlobalVar", "position": 121, "name": {"$type": "TrStr", "value": "a", "isInterned": false}}, "op": 1}}], "kwargs": []}, {"$type": "Assign", "position": 122, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "a", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 123, "hasCont": false, "func": {"$type": "GlobalVar", "position": 124, "name": {"$type": "TrStr", "value": "time", "isInterned": false}}, "args": [], "kwargs": []}}, {"$type": "Assign", "position": 125, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "k", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 126, "hasCont": false, "func": {"$type": "GlobalVar", "position": 127, "name": {"$type": "TrStr", "value": "bench", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 128, "name": {"$type": "TrStr", "value": "S", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 129, "name": {"$type": "TrStr", "value": "M", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 130, "name": {"$type": "TrStr", "value": "LL", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 131, "name": {"$type": "TrStr", "value": "N", "isInterned": false}}}], "kwargs": []}}, {"$type": "CallEx", "position": 132, "hasCont": false, "func": {"$type": "GlobalVar", "position": 133, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "value", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 134, "name": {"$type": "TrStr", "value": "k", "isInterned": false}}}], "kwargs": []}, {"$type": "CallEx", "position": 135, "hasCont": false, "func": {"$type": "GlobalVar", "position": 136, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "time1", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "BinOp", "position": 137, "left": {"$type": "CallEx", "position": 138, "hasCont": false, "func": {"$type": "GlobalVar", "position": 139, "name": {"$type": "TrStr", "value": "time", "isInterned": false}}, "args": [], "kwargs": []}, "right": {"$type": "GlobalVar", "position": 140, "name": {"$type": "TrStr", "value": "a", "isInterned": false}}, "op": 1}}], "kwargs": []}, {"$type": "Assign", "position": 141, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "a", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 142, "hasCont": false, "func": {"$type": "GlobalVar", "position": 143, "name": {"$type": "TrStr", "value": "time", "isInterned": false}}, "args": [], "kwargs": []}}, {"$type": "Assign", "position": 144, "hasCont": false, "lhs": {"$type": "StoreGlobal", "name": {"$type": "TrStr", "value": "k", "isInterned": false}}, "rhs": {"$type": "CallEx", "position": 145, "hasCont": false, "func": {"$type": "GlobalVar", "position": 146, "name": {"$type": "TrStr", "value": "bench", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 147, "name": {"$type": "TrStr", "value": "S", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 148, "name": {"$type": "TrStr", "value": "M", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 149, "name": {"$type": "TrStr", "value": "M", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 150, "name": {"$type": "TrStr", "value": "M", "isInterned": false}}}], "kwargs": []}}, {"$type": "CallEx", "position": 151, "hasCont": false, "func": {"$type": "GlobalVar", "position": 152, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "value", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "GlobalVar", "position": 153, "name": {"$type": "TrStr", "value": "k", "isInterned": false}}}], "kwargs": []}, {"$type": "CallEx", "position": 154, "hasCont": false, "func": {"$type": "GlobalVar", "position": 155, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrStr", "value": "time1", "isInterned": false}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "BinOp", "position": 156, "left": {"$type": "CallEx", "position": 157, "hasCont": false, "func": {"$type": "GlobalVar", "position": 158, "name": {"$type": "TrStr", "value": "time", "isInterned": false}}, "args": [], "kwargs": []}, "right": {"$type": "GlobalVar", "position": 159, "name": {"$type": "TrStr", "value": "a", "isInterned": false}}, "op": 1}}], "kwargs": []}, {"$type": "CallEx", "position": 160, "hasCont": false, "func": {"$type": "GlobalVar", "position": 161, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 162, "hasCont": false, "func": {"$type": "Attribute", "position": 163, "hasCont": false, "value": {"$type": "List", "position": 164, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}]}, "attr": {"$type": "TrStr", "value": "__str__", "isInterned": false}}, "args": [], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 165, "hasCont": false, "func": {"$type": "GlobalVar", "position": 166, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 167, "hasCont": false, "func": {"$type": "GlobalVar", "position": 168, "name": {"$type": "TrStr", "value": "str", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "List", "position": 169, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}]}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 170, "hasCont": false, "func": {"$type": "GlobalVar", "position": 171, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 172, "hasCont": false, "func": {"$type": "GlobalVar", "position": 173, "name": {"$type": "TrStr", "value": "str", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "List", "position": 174, "hasCont": false, "elements": []}}], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 175, "hasCont": false, "func": {"$type": "GlobalVar", "position": 176, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "List", "position": 177, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}]}}], "kwargs": []}, {"$type": "CallEx", "position": 178, "hasCont": false, "func": {"$type": "GlobalVar", "position": 179, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 180, "hasCont": false, "func": {"$type": "Attribute", "position": 181, "hasCont": false, "value": {"$type": "CallEx", "position": 182, "hasCont": false, "func": {"$type": "GlobalVar", "position": 183, "name": {"$type": "TrStr", "value": "list", "isInterned": false}}, "args": [], "kwargs": []}, "attr": {"$type": "TrStr", "value": "__repr__", "isInterned": false}}, "args": [], "kwargs": []}}], "kwargs": []}, {"$type": "CallEx", "position": 184, "hasCont": false, "func": {"$type": "GlobalVar", "position": 185, "name": {"$type": "TrStr", "value": "print", "isInterned": false}}, "args": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "CallEx", "position": 186, "hasCont": false, "func": {"$type": "Attribute", "position": 187, "hasCont": false, "value": {"$type": "List", "position": 188, "hasCont": false, "elements": [{"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 1}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 2}}}, {"$type": "SequenceElement", "unpack": false, "value": {"$type": "Constant", "o": {"$type": "TrInt", "value": 3}}}]}, "attr": {"$type": "TrStr", "value": "__repr__", "isInterned": false}}, "args": [], "kwargs": []}}], "kwargs": []}]}, "metadata": {"$type": "Metadata", "localnames": [], "freenames": [], "codename": "<module>", "filename": "test.src.py", "sourceCode": "# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n    self.z = x + y\n    self.w = x * y\n    # 1-7\n    self.u1 = x + y\n    self.u2 = x + y\n    self.u3 = x + y\n    self.u4 = x + y\n    self.u5 = x + y\n    self.u6 = x + y\n    self.u7 = x + y\n    # 8 - 20\n    self.v1 = x + y\n    self.v2 = x + y\n    self.v3 = x + y\n    self.v4 = x + y\n    self.v5 = x + y\n    self.v6 = x + y\n    self.v7 = x + y\n    self.v8 = x + y\n    self.v9 = x + y\n    # 21 - 35\n    \n    self.w9 = 10\n    self.w1 = x + y\n    self.w2 = x + y\n    self.w3 = x + y\n    self.w4 = x + y\n    self.w5 = x + y\n    self.w6 = x + y\n    self.w7 = x + y\n    self.w8 = x + y\n    self.z = 0\n\n\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__, \"U\": 3})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o1, o2, o3, o4):\n    k = 0\n    os = [o1, o2, o3, o4]\n    for i in range(10000000):\n        k = os[i % 4].U\n    return k\n\nclass M:\n    U = 5\n\nclass N:\n    U = 30\n\nclass LL:\n    U = 30\n\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, LL, N)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S, M, M, M)\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\nprint([1, 2, 3].__str__())\nprint(str([1, 2, 3]))\nprint(str([]))\nprint([1, 2, 3])\nprint(list().__repr__())\nprint([1, 2, 3].__repr__())", "compressedSpanPointers": [2155872640, 41943936, 75498880, 75498368, 109053824, 142608768, 176163712, 209718144, 226496128, 260050560, 276827776, 293606016, 327160960, 327160960, 360715904, 394270336, 411048320, 444602752, 461380736, 494935168, 511713152, 545268096, 578822528, 595600512, 629154944, 645932928, 679487872, 713042304, 729820288, 763374720, 780152704, 813707648, 847262080, 864040064, 897594496, 914372480, 947927424, 981481856, 998259072, 1015037312, 1048591744, 1065369728, 1098924672, 1132479616, 1166034560, 1199588992, 1216366976, 1249921408, 1266699392, 1300254336, 1333808768, 1350586752, 1384141184, 1400919168, 1434473600, 1451251584, 1484806016, 1501584000, 1535138432, 1551916416, 1585470848, 1602248832, 1635803776, 1669358720, 1702913664, 1736468608, 1770023040, 1786801024, 1820355968, 1853910912, 1887465856, 1921020288, 1937798272, 1971352704, 1988130688, 2021685120, 2038463104, 2072018048, 2105572480, 2122350464, 16809985, 25166080, 2147549568, 16941057, 58720516, 2147550592, 17203201, 125829382, 2147551104, 17334273, 125829385, 2147551872, 17530881, 209715467, 2147552384, 17661953, 243269903, 2147553408, 17924097, 310378771, 2147554432, 18055169, 360710422, 2147555200, 18251777, 394264856, 2147555712, 18513921, 461373724, 2147556736, 18776065, 528482592, 2147557760, 19038209, 595591460, 2147558784, 19300353, 662700328, 2147559808, 19562497, 729809196, 2147560832, 19693569, 763363630, 2147561344, 19955713, 830472496, 2147561856, 20086785, 864026932, 2147562368, 20283393, 914358583, 2147563648, 20545537, 947913018, 2147564416, 20742145, 998244669, 2147564416, 20873217, 1065353532, 2147565696, 21069825, 1115685185, 2147566208, 21200897, 1149239621, 2147567232, 21331969, 1182794055, 2147567744, 21594113, 1249902923, 2147568768, 21856257, 1317011791, 2147569792, 22118401, 1350566226, 2147570560, 22315009, 1434452310, 2147571072, 22511617, 1484783961, 2147571840, 22708225, 1484783963, 2147572864, 22642689, 1568670046, 2147573632, 22970369, 1602224480, 2147574144, 23232513, 1669333346, 2147574656, 23363585, 1702887782, 2147575680, 23625729, 1769996650, 2147576704, 23887873, 1837105518, 2147577216, 24084481, 1887437169, 2147578496, 24346625, 1920991604, 2147579264, 24543233, 1971323255, 2147579264, 24674305, 2038432118, 2147580544, 24870913, 2055209340, 2147581312, 25067521, 2105540991, 2147581312, 33587202, 25166338, 2147615104, 33783810, 75497989, 2147615872, 33980418, 125829640, 2147617152, 34242562, 159384075, 2147617920, 34439170, 209715726, 2147618688, 34635778, 293601810, 2147619200, 34832386, 343933461, 2147620480, 35094530, 377487896, 2147621248, 35291138, 427819547, 2147621248, 35422210, 427819549, 2147622528, 35618818, 511705632, 2147623296, 35815426, 562037283, 2147623296, 35962880], "compressedPositions": [25198594, 2155872896, 92275584, 2147713044, 2147713035, 2147713032, 2147844224, 109058688, 142639116, 2148499469, 2155875712, 243273088, 92278144, 109055360, 226495872, 176164224, 125833088, 2148499466, 2148499462, 2148499463, 2148565120, 276829568, 276825472, 293634065, 2148565009, 2147844113, 2147909649, 2148499473, 2148171793, 2148237329, 2148433938, 2155876992, 276828800, 92279424, 109056640, 260051584, 176165504, 192942720, 243274624, 2148761616, 2148761605, 2148761606, 2148761615, 2148761610, 2148761611, 2148761614, 2148827264, 343937152, 343934336, 343934592, 343936896, 343935616, 343935872, 343936640, 360742933, 2149154837, 2148433941, 2147844117, 2148499477, 2149089301, 2148761621, 2148827157, 2149023767, 2155878784, 209721216, 260052864, 360717184, 2149285911, 2149285893, 2149285894, 2149285910, 2149285895, 2149417088, 511710336, 545292320, 2148499488, 2147844128, 2147909664, 2148433952, 2148040737, 2155880832, 343941504, 92283264, 109060480, 327164288, 142615168, 2149744661, 2149744645, 2149744646, 2149744660, 2149744650, 2149744651, 2149744659, 2149744652, 2149744658, 2149875840, 612369792, 629178405, 2147909670, 2155882112, 142616192, 92284544, 109061760, 125839232, 2150334479, 2150400128, 813698176, 1015054396, 2148040764, 2147844157, 2155888000, 142622080, 92290688, 2151579656, 2151579653, 2151776384, 1115691648, 1132494915, 2148040771, 2147844164, 2155889792, 125846656, 75515008, 92292736, 2152169488, 2152300672, 1233132672, 1233126528, 1233128064, 1233126784, 1233129856, 1233132416, 1233131136, 1233131904, 1535148157, 2148433921, 8421377, 25181568, 17137792, 17137673, 2147550592, 125829383, 2155872519, 2152628225, 125830272, 17268744, 2147551104, 243269895, 2149023745, 125833088, 17268757, 2147551104, 427819271, 2152562689, 125838976, 17268782, 2147551104, 1015021831, 2151972865, 192970753, 276827264, 17989760, 18055177, 2147554688, 2147554944, 176161048, 2155872537, 2148171777, 478183425, 478153344, 18644996, 2147556480, 142606621, 2155872541, 2148302849, 494929280, 18710538, 2147556992, 2147556992, 310378782, 2147844097, 511709056, 18776081, 2147557248, 2147557248, 444596511, 2147844097, 528486272, 18841625, 2147557248, 360710431, 2148761601, 528488576, 18972800, 18972682, 2147557760, 75497761, 2148040705, 578846721, 578819712, 19038212, 2147558016, 159383842, 2148171777, 578816896, 19038221, 2147558016, 243269922, 2148564993, 578818688, 19038228, 2147558016, 360710435, 2155872547, 2148630529, 595592576, 19103759, 2147558272, 276824356, 2155872548, 2149220353, 612369792, 19169295, 2147558528, 427819300, 2148892673, 612373376, 19169304, 2147559040, 2147559040, 176161062, 2147778561, 645924992, 19366016, 19365909, 2147559296, 75497767, 2148106241, 662702720, 19365899, 2147559296, 226492711, 2148433921, 662704256, 19365905, 2147559296, 327156007, 2148827137, 679510017, 679481728, 19431429, 2147559552, 260047144, 2148564993, 696287233, 696261248, 19496965, 2147559808, 260047145, 2149154817, 696259968, 19496979, 2147559808, 411042106, 2155872570, 2149220353, 981468544, 20611078, 2147564160, 427819322, 2149023745, 981471104, 20676736, 20676629, 2147564416, 92275003, 2147909633, 998249600, 20676617, 2147564416, 176161083, 2148761601, 1015054337, 1015025280, 20742149, 2147564672, 109052220, 2148368385, 1015024000, 20742154, 2147564672, 209715517, 2155872573, 2148564993, 1031800192, 20807686, 2147564928, 260047166, 2155872574, 2149089281, 1048577408, 20873222, 2147565184, 394264894, 2148892673, 1048579200, 20873226, 2147565440, 2147565440, 461373759, 2147844097, 1065354880, 20938778, 2147565440, 411042111, 2148515840]}}