{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"x","isInterned":false}},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"Assign","position":2,"hasCont":false,"lhs":{"$type":"StoreListEx","position":4,"hasCont":false,"before":[{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"x","isInterned":false}}],"unpack":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"after":[{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"y","isInterned":false}}]},"rhs":{"$type":"List","position":3,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":3}}}]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"g","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"u","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Return","position":1,"hasCont":false,"value":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"x","isInterned":false}},"code":{"$type":"Return","position":3,"hasCont":false,"value":{"$type":"BinOp","position":1,"left":{"$type":"LocalVar","position":2,"slot":0},"right":{"$type":"LocalVar","position":3,"slot":-1},"op":0}},"metadata":{"$type":"Metadata","localnames":["x"],"freenames":["u"],"codename":"<lambda>","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147581954,2147713028,2147598336],"compressedPositions":[109054848,109058688,109057408,109057664,109058496]}},"default_args":[],"freeslots":[0]}}]},"metadata":{"$type":"Metadata","localnames":["u"],"freenames":[],"codename":"g","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147598336],"compressedPositions":[92307462,2149220358,2147794944]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"u","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"x","isInterned":false}},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":2,"hasCont":true,"test":{"$type":"CmpOp","position":3,"op":15,"left":{"$type":"LocalVar","position":4,"slot":1},"comparators":[{"$type":"LocalVar","position":5,"slot":0}]},"body":{"$type":"Block","hasCont":true,"suite":[{"$type":"Assign","position":6,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"BinOp","position":7,"left":{"$type":"LocalVar","position":8,"slot":1},"right":{"$type":"Constant","o":{"$type":"TrInt","value":1}},"op":0}},{"$type":"Yield","position":9,"value":{"$type":"LocalVar","position":10,"slot":1}}]},"orelse":null}]},"metadata":{"$type":"Metadata","localnames":["x","i"],"freenames":[],"codename":"u","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147713028,2147581957,2147909637,2147975176,2147909641,2148171787,2148171787,2148302861,2147581966,2147598336],"compressedPositions":[142639116,2148499465,2147778569,2148106250,2147778570,2148171786,2148499466,2148237322,2148433931,2148040715,2148630539,2148302859,2148368396,2148040716,2148450304]}},"default_args":[],"freeslots":[]}},{"$type":"CallEx","position":7,"hasCont":false,"func":{"$type":"GlobalVar","position":8,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":9,"hasCont":false,"func":{"$type":"CallEx","position":10,"hasCont":false,"func":{"$type":"GlobalVar","position":11,"name":{"$type":"TrStr","value":"g","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":12,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"gen","isInterned":false}},"rhs":{"$type":"CallEx","position":13,"hasCont":false,"func":{"$type":"GlobalVar","position":14,"name":{"$type":"TrStr","value":"u","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":5}}}],"kwargs":[]}},{"$type":"CallEx","position":15,"hasCont":false,"func":{"$type":"GlobalVar","position":16,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"starting gen","isInterned":false}}}],"kwargs":[]},{"$type":"CallEx","position":17,"hasCont":false,"func":{"$type":"GlobalVar","position":18,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":19,"hasCont":false,"func":{"$type":"GlobalVar","position":20,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":21,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":22,"hasCont":false,"func":{"$type":"GlobalVar","position":23,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":24,"hasCont":false,"func":{"$type":"GlobalVar","position":25,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":26,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":27,"hasCont":false,"func":{"$type":"GlobalVar","position":28,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":29,"hasCont":false,"func":{"$type":"GlobalVar","position":30,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":31,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":32,"hasCont":false,"func":{"$type":"GlobalVar","position":33,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":34,"hasCont":false,"func":{"$type":"GlobalVar","position":35,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":36,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":37,"hasCont":false,"func":{"$type":"Attribute","position":38,"hasCont":false,"value":{"$type":"GlobalVar","position":39,"name":{"$type":"TrStr","value":"print","isInterned":false}},"attr":{"$type":"TrStr","value":"__call__","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":40,"hasCont":false,"func":{"$type":"GlobalVar","position":41,"name":{"$type":"TrStr","value":"next","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":42,"name":{"$type":"TrStr","value":"gen","isInterned":false}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"k","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":2,"hasvararg":true,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"args","isInterned":false},"1":{"$type":"TrStr","value":"x","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"CallEx","position":1,"hasCont":false,"func":{"$type":"GlobalVar","position":2,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"LocalVar","position":3,"slot":0}}],"kwargs":[]},{"$type":"Return","position":4,"hasCont":false,"value":{"$type":"LocalVar","position":5,"slot":1}}]},"metadata":{"$type":"Metadata","localnames":["args","x"],"freenames":[],"codename":"k","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147713026,2147778565,2147909639,2147581960,2147598336],"compressedPositions":[394297369,2148302872,2147778584,2148499480,2148106264,2148171800,2148433945,2147778585,2148253696]}},"default_args":[{"$type":"DefaultArgEntry","slot":1,"value":{"$type":"Tuple","position":44,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}]}}],"freeslots":[]}},{"$type":"CallEx","position":45,"hasCont":false,"func":{"$type":"GlobalVar","position":46,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":47,"hasCont":false,"func":{"$type":"GlobalVar","position":48,"name":{"$type":"TrStr","value":"k","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":3}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":5}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":6}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"uq","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":2,"allargcount":3,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"a","isInterned":false},"1":{"$type":"TrStr","value":"b","isInterned":false},"2":{"$type":"TrStr","value":"y","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Return","position":1,"hasCont":false,"value":{"$type":"BinOp","position":2,"left":{"$type":"BinOp","position":3,"left":{"$type":"LocalVar","position":4,"slot":0},"right":{"$type":"LocalVar","position":5,"slot":1},"op":0},"right":{"$type":"LocalVar","position":6,"slot":2},"op":0}}]},"metadata":{"$type":"Metadata","localnames":["a","b","y"],"freenames":[],"codename":"uq","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147581955,2147581955,2147778563,2147844102,2147778567,2147598336],"compressedPositions":[494960670,2148827166,2147778590,2148237342,2148565022,2148302878,2148499486,2148777984]}},"default_args":[{"$type":"DefaultArgEntry","slot":2,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"freeslots":[]}},{"$type":"CallEx","position":50,"hasCont":false,"func":{"$type":"GlobalVar","position":51,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":52,"hasCont":false,"func":{"$type":"GlobalVar","position":53,"name":{"$type":"TrStr","value":"uq","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}}],"kwargs":[]},{"$type":"CallEx","position":54,"hasCont":false,"func":{"$type":"GlobalVar","position":55,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":56,"hasCont":false,"func":{"$type":"GlobalVar","position":57,"name":{"$type":"TrStr","value":"uq","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[[{"$type":"TrStr","value":"y","isInterned":false},{"$type":"Constant","o":{"$type":"TrInt","value":3}}]]}}],"kwargs":[]},{"$type":"CallEx","position":58,"hasCont":false,"func":{"$type":"GlobalVar","position":59,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":60,"hasCont":false,"func":{"$type":"GlobalVar","position":61,"name":{"$type":"TrStr","value":"dict","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"List","position":62,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Tuple","position":63,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}]}}]}}],"kwargs":[]}}],"kwargs":[]},{"$type":"Assign","position":64,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"AugAssign","position":65,"op":0,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"CallEx","position":66,"hasCont":false,"func":{"$type":"GlobalVar","position":67,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":68,"name":{"$type":"TrStr","value":"z","isInterned":false}}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"test1","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":2,"hasCont":true,"test":{"$type":"CmpOp","position":3,"op":15,"left":{"$type":"LocalVar","position":4,"slot":0},"comparators":[{"$type":"Constant","o":{"$type":"TrInt","value":10000000}}]},"body":{"$type":"Block","hasCont":true,"suite":[{"$type":"AugAssign","position":5,"op":0,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"Yield","position":6,"value":{"$type":"LocalVar","position":7,"slot":0}}]},"orelse":null}]},"metadata":{"$type":"Metadata","localnames":["x"],"freenames":[],"codename":"test1","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147713028,2147581957,2147909637,2147975176,2148106250,2147581963,2147598336],"compressedPositions":[662732843,2148499496,2147778600,2148106281,2147778601,2148171817,2148958249,2148237354,2148040746,2148433963,2148040747,2148450304]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"test2","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":2,"hasCont":false,"test":{"$type":"CmpOp","position":3,"op":15,"left":{"$type":"LocalVar","position":4,"slot":0},"comparators":[{"$type":"Constant","o":{"$type":"TrInt","value":10000000}}]},"body":{"$type":"Block","hasCont":false,"suite":[{"$type":"AugAssign","position":5,"op":0,"lhs":{"$type":"StoreLocal","slot":0},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}]},"orelse":null},{"$type":"Return","position":6,"hasCont":false,"value":{"$type":"LocalVar","position":7,"slot":0}}]},"metadata":{"$type":"Metadata","localnames":["x"],"freenames":[],"codename":"test2","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147713028,2147844102,2147975174,2148040713,2147844106,2147581963,2147598336],"compressedPositions":[746618928,2148302893,2147778605,2148106286,2147778607,2148433966,2148171822,2148958254,2148237359,2148040752,2147778608,2148253696]}},"default_args":[],"freeslots":[]}},{"$type":"CallEx","position":71,"hasCont":false,"func":{"$type":"GlobalVar","position":72,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},{"$type":"CallEx","position":73,"hasCont":false,"func":{"$type":"GlobalVar","position":74,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},{"$type":"CallEx","position":75,"hasCont":false,"func":{"$type":"GlobalVar","position":76,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}],"kwargs":[]},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"f","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"CallEx","position":1,"hasCont":true,"func":{"$type":"GlobalVar","position":2,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"s2","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Yield","position":3,"value":{"$type":"Constant","o":{"$type":"TrInt","value":5}}}}],"kwargs":[]}]},"metadata":{"$type":"Metadata","localnames":[],"freenames":[],"codename":"f","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147581954,2147713028,2147860480],"compressedPositions":[1098940482,2149220418,2147778626,2148106306,2148630594,2149105664]}},"default_args":[],"freeslots":[]}},{"$type":"CallEx","position":78,"hasCont":false,"func":{"$type":"GlobalVar","position":79,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":9}}}],"kwargs":[]},{"$type":"Assign","position":80,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"c","isInterned":false}},"rhs":{"$type":"CallEx","position":81,"hasCont":false,"func":{"$type":"GlobalVar","position":82,"name":{"$type":"TrStr","value":"f","isInterned":false}},"args":[],"kwargs":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"k","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":0,"allargcount":0,"hasvararg":false,"haskwarg":false,"kwindices":{},"code":{"$type":"Block","hasCont":true,"suite":[{"$type":"YieldFrom","position":1,"value":{"$type":"GlobalVar","position":2,"name":{"$type":"TrStr","value":"c","isInterned":false}}}]},"metadata":{"$type":"Metadata","localnames":[],"freenames":[],"codename":"k","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147581955,2147598336],"compressedPositions":[1182826567,2148565063,2147778631,2148515840]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":84,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"z","isInterned":false}},"rhs":{"$type":"CallEx","position":85,"hasCont":false,"func":{"$type":"Attribute","position":86,"hasCont":false,"value":{"$type":"GlobalVar","position":87,"name":{"$type":"TrStr","value":"c","isInterned":false}},"attr":{"$type":"TrStr","value":"send","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrNone"}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"NamedExpr","position":88,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"x","isInterned":false}},"expr":{"$type":"CallEx","position":89,"hasCont":false,"func":{"$type":"GlobalVar","position":90,"name":{"$type":"TrStr","value":"ref","isInterned":false}},"args":[],"kwargs":[]}}}],"kwargs":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"__init__","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":3,"allargcount":3,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"self","isInterned":false},"1":{"$type":"TrStr","value":"x","isInterned":false},"2":{"$type":"TrStr","value":"y","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreAttr","position":3,"hasCont":false,"attr":{"$type":"TrStr","value":"x","isInterned":false},"value":{"$type":"LocalVar","position":4,"slot":0}},"rhs":{"$type":"LocalVar","position":2,"slot":1}},{"$type":"Assign","position":5,"hasCont":false,"lhs":{"$type":"StoreAttr","position":7,"hasCont":false,"attr":{"$type":"TrStr","value":"y","isInterned":false},"value":{"$type":"LocalVar","position":8,"slot":0}},"rhs":{"$type":"LocalVar","position":6,"slot":2}}]},"metadata":{"$type":"Metadata","localnames":["self","x","y"],"freenames":[],"codename":"__init__","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147713028,2147713026,2147844098,2147909639,2147581960,2147581959,2148106247,2148188160],"compressedPositions":[1535148125,2148434012,2147778652,2148434012,2148368476,2148171868,2148040797,2147778653,2148368477,2148171869,2148057088]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"__repr__","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"self","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Return","position":1,"hasCont":false,"value":{"$type":"BinOp","position":2,"left":{"$type":"BinOp","position":3,"left":{"$type":"BinOp","position":4,"left":{"$type":"BinOp","position":5,"left":{"$type":"BinOp","position":6,"left":{"$type":"Constant","o":{"$type":"TrStr","value":"S","isInterned":false}},"right":{"$type":"Constant","o":{"$type":"TrStr","value":"(","isInterned":false}},"op":0},"right":{"$type":"CallEx","position":7,"hasCont":false,"func":{"$type":"GlobalVar","position":8,"name":{"$type":"TrStr","value":"str","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Attribute","position":9,"hasCont":false,"value":{"$type":"LocalVar","position":10,"slot":0},"attr":{"$type":"TrStr","value":"x","isInterned":false}}}],"kwargs":[]},"op":0},"right":{"$type":"Constant","o":{"$type":"TrStr","value":", ","isInterned":false}},"op":0},"right":{"$type":"CallEx","position":11,"hasCont":false,"func":{"$type":"GlobalVar","position":12,"name":{"$type":"TrStr","value":"str","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Attribute","position":13,"hasCont":false,"value":{"$type":"LocalVar","position":14,"slot":0},"attr":{"$type":"TrStr","value":"y","isInterned":false}}}],"kwargs":[]},"op":0},"right":{"$type":"Constant","o":{"$type":"TrStr","value":")","isInterned":false}},"op":0}}]},"metadata":{"$type":"Metadata","localnames":["self"],"freenames":[],"codename":"__repr__","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147581955,2147581955,2147778563,2147844099,2147909635,2147975176,2147909640,2148106250,2148237322,2148302861,2147778573,2148433935,2148565007,2148646912],"compressedPositions":[1585479775,2151514207,2147778655,2148237407,2151120991,2150203487,2149744735,2148827231,2149023839,2149220447,2149285983,2149679199,2149548127,2150400095,2150596703,2150662239,2151055455,2150940672]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":93,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"objs","isInterned":false}},"rhs":{"$type":"List","position":94,"hasCont":false,"elements":[]}},{"$type":"Assign","position":95,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"S","isInterned":false}},"rhs":{"$type":"CallEx","position":96,"hasCont":false,"func":{"$type":"GlobalVar","position":97,"name":{"$type":"TrStr","value":"type","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"S","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Tuple","position":98,"hasCont":false,"elements":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":99,"name":{"$type":"TrStr","value":"object","isInterned":false}}}]}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Dict","position":100,"hasCont":false,"entries":[{"$type":"DictEntry","key":{"$type":"Constant","o":{"$type":"TrStr","value":"__init__","isInterned":false}},"value":{"$type":"GlobalVar","position":101,"name":{"$type":"TrStr","value":"__init__","isInterned":false}}},{"$type":"DictEntry","key":{"$type":"Constant","o":{"$type":"TrStr","value":"__repr__","isInterned":false}},"value":{"$type":"GlobalVar","position":102,"name":{"$type":"TrStr","value":"__repr__","isInterned":false}}}]}}],"kwargs":[]}},{"$type":"Assign","position":0,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"bench","isInterned":false}},"rhs":{"$type":"Lambda","hasCont":false,"fptr":{"$type":"TrFuncPointer","posargcount":1,"allargcount":1,"hasvararg":false,"haskwarg":false,"kwindices":{"0":{"$type":"TrStr","value":"o","isInterned":false}},"code":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":1,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"Assign","position":2,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":2},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":0}}},{"$type":"While","position":3,"hasCont":false,"test":{"$type":"CmpOp","position":4,"op":15,"left":{"$type":"LocalVar","position":5,"slot":1},"comparators":[{"$type":"Constant","o":{"$type":"TrInt","value":10000000}}]},"body":{"$type":"Block","hasCont":false,"suite":[{"$type":"Assign","position":6,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":2},"rhs":{"$type":"Attribute","position":7,"hasCont":false,"value":{"$type":"LocalVar","position":8,"slot":0},"attr":{"$type":"TrStr","value":"x","isInterned":false}}},{"$type":"Assign","position":9,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":2},"rhs":{"$type":"Attribute","position":10,"hasCont":false,"value":{"$type":"LocalVar","position":11,"slot":0},"attr":{"$type":"TrStr","value":"y","isInterned":false}}},{"$type":"Assign","position":12,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":2},"rhs":{"$type":"Attribute","position":13,"hasCont":false,"value":{"$type":"LocalVar","position":14,"slot":0},"attr":{"$type":"TrStr","value":"x","isInterned":false}}},{"$type":"Assign","position":15,"hasCont":false,"lhs":{"$type":"StoreLocal","slot":2},"rhs":{"$type":"Attribute","position":16,"hasCont":false,"value":{"$type":"LocalVar","position":17,"slot":0},"attr":{"$type":"TrStr","value":"y","isInterned":false}}},{"$type":"AugAssign","position":18,"op":0,"lhs":{"$type":"StoreLocal","slot":1},"rhs":{"$type":"Constant","o":{"$type":"TrInt","value":1}}}]},"orelse":null},{"$type":"Return","position":19,"hasCont":false,"value":{"$type":"LocalVar","position":20,"slot":2}}]},"metadata":{"$type":"Metadata","localnames":["o","i","k"],"freenames":[],"codename":"bench","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2147581954,2147713028,2147844102,2147975176,2148106248,2148171787,2148302861,2148302861,2148433935,2148565009,2148565009,2148696083,2148827157,2148827157,2148958231,2149089305,2149089305,2149220379,2147975196,2147581981,2147598336],"compressedPositions":[1770029170,2148302954,2147778666,2148106347,2147778667,2148106348,2147778673,2148434028,2148171884,2148958316,2148237421,2148040813,2148499565,2148302957,2148368494,2148040814,2148499566,2148302958,2148368495,2148040815,2148499567,2148302959,2148368496,2148040816,2148499568,2148302960,2148368497,2148040818,2147778674,2148253696]}},"default_args":[],"freeslots":[]}},{"$type":"Assign","position":104,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"a","isInterned":false}},"rhs":{"$type":"CallEx","position":105,"hasCont":false,"func":{"$type":"GlobalVar","position":106,"name":{"$type":"TrStr","value":"time","isInterned":false}},"args":[],"kwargs":[]}},{"$type":"Assign","position":107,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"xs","isInterned":false}},"rhs":{"$type":"CallEx","position":108,"hasCont":false,"func":{"$type":"GlobalVar","position":109,"name":{"$type":"TrStr","value":"test2","isInterned":false}},"args":[],"kwargs":[]}},{"$type":"CallEx","position":110,"hasCont":false,"func":{"$type":"GlobalVar","position":111,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"value","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":112,"name":{"$type":"TrStr","value":"xs","isInterned":false}}}],"kwargs":[]},{"$type":"CallEx","position":113,"hasCont":false,"func":{"$type":"GlobalVar","position":114,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"time1","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"BinOp","position":115,"left":{"$type":"CallEx","position":116,"hasCont":false,"func":{"$type":"GlobalVar","position":117,"name":{"$type":"TrStr","value":"time","isInterned":false}},"args":[],"kwargs":[]},"right":{"$type":"GlobalVar","position":118,"name":{"$type":"TrStr","value":"a","isInterned":false}},"op":1}}],"kwargs":[]},{"$type":"Assign","position":119,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"a","isInterned":false}},"rhs":{"$type":"CallEx","position":120,"hasCont":false,"func":{"$type":"GlobalVar","position":121,"name":{"$type":"TrStr","value":"time","isInterned":false}},"args":[],"kwargs":[]}},{"$type":"Assign","position":122,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"k","isInterned":false}},"rhs":{"$type":"CallEx","position":123,"hasCont":false,"func":{"$type":"GlobalVar","position":124,"name":{"$type":"TrStr","value":"bench","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":125,"hasCont":false,"func":{"$type":"GlobalVar","position":126,"name":{"$type":"TrStr","value":"S","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}}],"kwargs":[]}},{"$type":"CallEx","position":127,"hasCont":false,"func":{"$type":"GlobalVar","position":128,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"value","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":129,"name":{"$type":"TrStr","value":"k","isInterned":false}}}],"kwargs":[]},{"$type":"CallEx","position":130,"hasCont":false,"func":{"$type":"GlobalVar","position":131,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"time1","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"BinOp","position":132,"left":{"$type":"CallEx","position":133,"hasCont":false,"func":{"$type":"GlobalVar","position":134,"name":{"$type":"TrStr","value":"time","isInterned":false}},"args":[],"kwargs":[]},"right":{"$type":"GlobalVar","position":135,"name":{"$type":"TrStr","value":"a","isInterned":false}},"op":1}}],"kwargs":[]},{"$type":"Assign","position":136,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"a","isInterned":false}},"rhs":{"$type":"CallEx","position":137,"hasCont":false,"func":{"$type":"GlobalVar","position":138,"name":{"$type":"TrStr","value":"time","isInterned":false}},"args":[],"kwargs":[]}},{"$type":"Assign","position":139,"hasCont":false,"lhs":{"$type":"StoreGlobal","name":{"$type":"TrStr","value":"k","isInterned":false}},"rhs":{"$type":"CallEx","position":140,"hasCont":false,"func":{"$type":"GlobalVar","position":141,"name":{"$type":"TrStr","value":"bench","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"CallEx","position":142,"hasCont":false,"func":{"$type":"GlobalVar","position":143,"name":{"$type":"TrStr","value":"S","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":1}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrInt","value":2}}}],"kwargs":[]}}],"kwargs":[]}},{"$type":"CallEx","position":144,"hasCont":false,"func":{"$type":"GlobalVar","position":145,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"value","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"GlobalVar","position":146,"name":{"$type":"TrStr","value":"k","isInterned":false}}}],"kwargs":[]},{"$type":"CallEx","position":147,"hasCont":false,"func":{"$type":"GlobalVar","position":148,"name":{"$type":"TrStr","value":"print","isInterned":false}},"args":[{"$type":"SequenceElement","unpack":false,"value":{"$type":"Constant","o":{"$type":"TrStr","value":"time1","isInterned":false}}},{"$type":"SequenceElement","unpack":false,"value":{"$type":"BinOp","position":149,"left":{"$type":"CallEx","position":150,"hasCont":false,"func":{"$type":"GlobalVar","position":151,"name":{"$type":"TrStr","value":"time","isInterned":false}},"args":[],"kwargs":[]},"right":{"$type":"GlobalVar","position":152,"name":{"$type":"TrStr","value":"a","isInterned":false}},"op":1}}],"kwargs":[]}]},"metadata":{"$type":"Metadata","localnames":[],"freenames":[],"codename":"<module>","filename":"test.src.py","sourceCode":"# this file is using unitypython, so we have builtins like `ref`\nx = 1\nx, *z, y = [1, 2, 3]\n\ndef g(u):\n    return lambda x: x + u\n\ndef u(x):\n    i = 0\n    while i < x:\n        i = i + 1\n        yield i\nprint(g(1)(2))\n\ngen = u(5)\nprint(\"starting gen\")\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint.__call__(next(gen))\n\ndef k(*args, x=(1, 2)):\n    print(args)\n    return x\n\nprint(k(1, 2, 3, 5, 6))\n\ndef uq(a, b, *, y = 1):\n    return a + b + y\n\nprint(uq(1, 2))\nprint(uq(1, 2, y=3))\nprint(dict([(1, 2)]))\n\nz = 1\nz += 1\nprint(z)\ndef test1():\n    x = 0\n    while x < 10000000:\n        x += 1\n        yield x\ndef test2():\n    x = 0\n    while x < 10000000:\n        x += 1\n    return x\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n# a = time()\n# xs = list(test1())\n# print(\"len\", len(xs))\n# print(\"time2\", time() - a)\n# print(1)\n\nprint(1)\nprint(1)\nprint(1)\n\n\ndef f():\n    print(\"s2\", (yield 5))\nprint(9)\nc = f()\n\ndef k():\n    yield from c\n\nz = c.send(None, x := ref())\n\n# try:\n#     raise Exception(\"test\")\n# except NativeError as e:\n#     print(e.typename == \"DivideByZeroException\")\n\n# if z:\n#     print(\"s1\", x.value)\n\n# if k().send(None, x):\n#     print(x.value)\n\n\n# co = f()\n# print(co.send(None))\n# co.send(3)\n\ndef __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\ndef __repr__(self):\n    return \"S\" + \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n\n\nobjs = []\n\nS = type(\"S\", (object,), {\"__init__\": __init__, \"__repr__\": __repr__})\n# objs.append(S(i, i * 2))\n\n\ndef bench(o):\n    i = 0\n    k = 0\n    while i < 10000000:\n        k = o.x\n        k = o.y\n        k = o.x\n        k = o.y\n        i += 1\n    return k\n\na = time()\nxs = test2()\nprint(\"value\", xs)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\na = time()\nk = bench(S(1, 2))\nprint(\"value\", k)\nprint(\"time1\", time() - a)\n\n\n# a = time()\n# xs = test2()\n# print(\"value\", xs)\n# print(\"time1\", time() - a)\n\n\n\n# print(a)\n\n# MyCls = type(\"MyCls\", (object,), {})\n# print(MyCls())\n\n\n","compressedSpanPointers":[2155872640,41943936,75498880,75498368,109053824,142608768,176163712,209718144,226496128,260050560,276827776,293606016,327160960,327160960,360715904,394270336,411048320,444602752,461380736,494935168,511713152,545268096,578822528,595600512,629154944,645932928,679487872,713042304,729820288,763374720,780152704,813707648,847262080,864040064,897594496,914372480,947927424,981481856,998259072,1015037312,1048591744,1065369728,1098924672,1132479616,1166034560,1199588992,1216366976,1249921408,1266699392,1300254336,1333808768,1350586752,1384141184,1400919168,1434473600,1451251584,1484806016,1501584000,1535138432,1551916416,1585470848,1602248832,1635803776,1669358720,1702913664,1736468608,1770023040,1786801024,1820355968,1853910912,1887465856,1921020288,1937798272,1971352704,1988130688,2021685120,2038463104,2072018048,2105572480,2122350464,16809985,25166080,2147549568,16941057,58720516,2147550592,17203201,125829382,2147551104,17334273,125829385,2147551872,17530881,209715467,2147552384,17661953,243269903,2147553408,17924097,310378771,2147554432,18055169,360710422,2147555200,18251777,394264856,2147555712,18513921,461373724,2147556736,18776065,528482592,2147557760,19038209,595591460,2147558784,19300353,662700326,2147559296,19431425,696254762,2147560320,19562497,729809196,2147560832,19824641,763363631,2147561600,20021249,847249715,2147562112,20217857,897581366,2147562880,20414465,897581368,2147563904,20348929,981467451,2147564672,20676609,1015021885,2147565184,20938753,1082130751,2147565696,21069825,1115685187,2147566208,21266433,1166016838,2147566976,21463041,1216348489,2147568256,21725185,1249902924,2147569024,21921793,1300234575,2147569024,22052865,1367343438,2147570304,22249473,1417675091,2147570816,22380545,1451229527,2147571840,22511617,1484783961,2147572352,22773761,1518338396,2147573120,22970369,1568670047,2147573888,23166977,1652556131,2147574400,23363585,1702887782,2147575168,23560193,1702887784,2147576192,23511040],"compressedPositions":[25198594,2155872896,92275584,2147713044,2147713035,2147713032,2147844224,109058688,142639116,2148499469,2155875712,243273088,92278144,109055360,226495872,176164224,125833088,2148499466,2148499462,2148499463,2148565120,276829568,276825472,293634065,2148565009,2147844113,2147909649,2148499473,2148171793,2148237329,2148433938,2155876992,276828800,92279424,109056640,260051584,176165504,192942720,243274624,2148761616,2148761605,2148761606,2148761615,2148761610,2148761611,2148761614,2148827264,343937152,343934336,343934592,343936896,343935616,343935872,343936640,360742933,2149154837,2148433941,2147844117,2148499477,2149089301,2148761621,2148827157,2149023767,2155878784,209721216,260052864,360717184,2149285911,2149285893,2149285894,2149285910,2149285895,2149417088,511710336,545292320,2148499488,2147844128,2147909664,2148433952,2148040737,2155880832,343941504,92283264,109060480,327164288,142615168,2149744661,2149744645,2149744646,2149744660,2149744650,2149744651,2149744659,2149744652,2149744658,2149875840,612369792,629178405,2147909670,2155882112,142616192,92284544,109061760,125839232,2150334479,2150400128,813698176,1015054396,2148040764,2147844157,2155888000,142622080,92290688,2151579656,2151579653,2151776384,1115691648,1132494915,2148040771,2147844164,2155889792,125846656,75515008,92292736,2152169488,2152300672,1233132672,1233126528,1233128064,1233126784,1233129856,1233132416,1233131136,1233131904,1535148125,2148434014,2155896704,1031824256,2154004489,2154004487,2154135680,1702905472,1702888576,1702889600,1702891136,1702893440,1702891392,1702892928,1702893952,1702905216,1702897280,1702899328,1702902912,1702904960,1770029170,2148302964,2155902080,176190592,75527296,142636416,2155184140,2155184133,2155184138,2155249792,1988104832,1988101504,1988104064,1988104576,2004910199,2149220471,2147844215,2148499575,2149154935,2148892791,2148761719,2149089401,2155903360,176191872,75528576,142637696,2155511826,2155511812,2155511817,2155511818,2155511825,2155511819,2155577472,2071990656,2071987584,2071990144,2071990400,2088796284,2149220476,2147844220,2148499580,2149154940,2148892796,2148761724,2149089406,2155904640,176193152,75529856,142638976,2155839506,2155839492,2155839497,2155839498,2155839505,2155839499,2147549312,2147549312,293601536,2147844097,8392576,16810000,2147549568,2147549568,444596481,2147844097,25169792,16875545,2147549568,360710401,2148761601,25172160]}}